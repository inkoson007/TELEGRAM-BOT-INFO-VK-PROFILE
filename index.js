require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");
const { VK } = require("vk-io");
const sqlite3 = require("sqlite3").verbose();
const path = require('path');
const fs = require('fs');
const axios = require('axios');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
const db = new sqlite3.Database("tracking.db", (err) => {
  if (err) console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:", err.message);
  else console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite.");
});

console.log('-----> VK —à–ø–∏–æ–Ω V1.1 <-----');

const chatId = process.env.ADMIN_CHAT_ID;
if (!chatId) {
  console.error('Admin chat ID is missing or invalid');
  return;
}


// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
db.run(`CREATE TABLE IF NOT EXISTS tracked_users (id INTEGER PRIMARY KEY AUTOINCREMENT, vk_id TEXT UNIQUE NOT NULL)`);
db.run(`CREATE TABLE IF NOT EXISTS user_logs (id INTEGER PRIMARY KEY AUTOINCREMENT, vk_id TEXT, action TEXT, timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)`);
db.run(`CREATE TABLE IF NOT EXISTS tracking_settings (vk_id TEXT UNIQUE NOT NULL, notify_friends BOOLEAN DEFAULT 1, notify_name BOOLEAN DEFAULT 1, notify_avatar BOOLEAN DEFAULT 1, notify_city BOOLEAN DEFAULT 1, notify_verified BOOLEAN DEFAULT 1, notify_last_seen BOOLEAN DEFAULT 1, notify_status BOOLEAN DEFAULT 1, notify_link BOOLEAN DEFAULT 1)`);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });
const vk = new VK({ token: process.env.VK_ACCESS_TOKEN });

// üìå –ö–æ–º–∞–Ω–¥–∞ /start (–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ)
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, `üëã –ü—Ä–∏–≤–µ—Ç, ${msg.from.first_name}!
–Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª–µ–π –í–ö–æ–Ω—Ç–∞–∫—Ç–µ. Version 1.1

üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.`);
});

// üìå –ö–æ–º–∞–Ω–¥–∞ /help (–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥)
bot.onText(/\/help/, (msg) => {
    const chatId = msg.chat.id;
  
    function escapeMarkdown(text) {
      return text.replace(/([_*[\]()~`>#+\-=|{}.!])/g, "\\$1");
    }
  
    const helpMessage = `
    ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
    üìå /start - ${escapeMarkdown("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")}
    üìå /help - ${escapeMarkdown("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")}
    üìå /track <id> - ${escapeMarkdown("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ")}
    üìå /profile <id> - ${escapeMarkdown("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ VK")}
    üìå /gprofile <id> - ${escapeMarkdown("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ VK")}
    üìå /info <id> - ${escapeMarkdown("–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ –≤ html")}
    üí° ${escapeMarkdown("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.")} 
    `;
  
    bot.sendMessage(chatId, helpMessage, { parse_mode: "Markdown" });
  });

// üìå –ö–æ–º–∞–Ω–¥–∞ /profile <VK_ID> (–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ñ–∏–ª–µ)
bot.onText(/\/profile (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  let vkId = match[1];

  // –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å, –∏–∑–≤–ª–µ–∫–∞–µ–º ID
  if (vkId.includes("vk.com/")) {
    const urlParts = vkId.split("/");
    vkId = urlParts[urlParts.length - 1]; // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–ª—ç—à–∞
  }

  try {
    const response = await vk.api.users.get({
      user_ids: vkId,
      fields: "photo_max_orig,city,verified,last_seen,status,online,sex,bdate,about,counters,has_mobile,blacklisted,site,relation,relation_partner,is_closed,career,military,photo_id,is_premium,wall_comments"
    });

    if (!response.length) return bot.sendMessage(chatId, "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");

    const user = response[0];
    const lastSeen = user.last_seen ? new Date(user.last_seen.time * 1000).toLocaleString() : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    const city = user.city ? user.city.title : "–ù–µ —É–∫–∞–∑–∞–Ω";
    const verified = user.verified ? "‚úÖ –î–∞" : "‚ùå –ù–µ—Ç";
    const status = user.status || "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç";
    const online = user.online ? "üü¢ –û–Ω–ª–∞–π–Ω" : "üî¥ –û—Ñ–ª–∞–π–Ω";
    const sex = user.sex === 1 ? "üë© –ñ–µ–Ω—â–∏–Ω–∞" : user.sex === 2 ? "üë® –ú—É–∂—á–∏–Ω–∞" : "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
    const bdate = user.bdate || "–ù–µ —É–∫–∞–∑–∞–Ω–∞";
    const about = user.about || "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è";
    const friendsCount = user.counters?.friends || 0;
    const followersCount = user.counters?.followers || 0;
    const photosCount = user.counters?.photos || 0;
    const videosCount = user.counters?.videos || 0;
    const giftsCount = user.counters?.gifts || 0;
    const wallPostsCount = user.counters?.posts || 0;
    const hasMobile = user.has_mobile ? "üì± –ü—Ä–∏–≤—è–∑–∞–Ω" : "‚ùå –ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω";
    const blacklisted = user.blacklisted ? "üö´ –í –ß–° —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" : "‚úÖ –ù–µ—Ç";
    const site = user.site ? user.site : "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω";
    const isClosed = user.is_closed ? "üîí –ó–∞–∫—Ä—ã—Ç—ã–π –ø—Ä–æ—Ñ–∏–ª—å" : "üåç –û—Ç–∫—Ä—ã—Ç—ã–π –ø—Ä–æ—Ñ–∏–ª—å";
    const isPremium = user.is_premium ? "üíé VK Premium" : "‚ùå –ù–µ—Ç";
    const wallComments = user.wall_comments ? "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω—ã" : "‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω—ã";

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞
    function getZodiacSign(date) {
      if (!date) return "–ù–µ —É–∫–∞–∑–∞–Ω";
      const [day, month] = date.split(".").map(Number);
      const zodiacSigns = [
        "‚ôë –ö–æ–∑–µ—Ä–æ–≥", "‚ôí –í–æ–¥–æ–ª–µ–π", "‚ôì –†—ã–±—ã", "‚ôà –û–≤–µ–Ω", "‚ôâ –¢–µ–ª–µ—Ü", "‚ôä –ë–ª–∏–∑–Ω–µ—Ü—ã",
        "‚ôã –†–∞–∫", "‚ôå –õ–µ–≤", "‚ôç –î–µ–≤–∞", "‚ôé –í–µ—Å—ã", "‚ôè –°–∫–æ—Ä–ø–∏–æ–Ω", "‚ôê –°—Ç—Ä–µ–ª–µ—Ü"
      ];
      const zodiacDates = [20, 19, 20, 20, 21, 21, 22, 22, 22, 23, 23, 21];
      return day > zodiacDates[month - 1] ? zodiacSigns[month] : zodiacSigns[month - 1];
    }

    const zodiacSign = getZodiacSign(user.bdate);

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π
    const relationTypes = [
      "–ù–µ —É–∫–∞–∑–∞–Ω–æ", "‚ù£Ô∏è –í–ª—é–±–ª–µ–Ω(–∞)", "üíç –ü–æ–º–æ–ª–≤–ª–µ–Ω(–∞)", "üíë –í –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö",
      "‚ù§Ô∏è –ñ–µ–Ω–∞—Ç/–ó–∞–º—É–∂–µ–º", "üíî –í—Å–µ —Å–ª–æ–∂–Ω–æ", "üíî –í –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ–∏—Å–∫–µ", "üö´ –ù–µ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö"
    ];
    let relation = relationTypes[user.relation] || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
    if (user.relation_partner) {
      relation += ` —Å [${user.relation_partner.first_name} ${user.relation_partner.last_name}](https://vk.com/id${user.relation_partner.id})`;
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–ü–ö –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω)
    const device = user.last_seen?.platform ? (user.last_seen.platform > 6 ? "üì± –¢–µ–ª–µ—Ñ–æ–Ω" : "üíª –ö–æ–º–ø—å—é—Ç–µ—Ä") : "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";

    // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown
    function escapeMarkdown(text) {
      return text.replace(/([_*[\]()~`>#+\-=|{}.!])/g, "\\$1");
    }

    const profileInfo = `
üë§ *–ü—Ä–æ—Ñ–∏–ª—å VK:* [${escapeMarkdown(user.first_name)} ${escapeMarkdown(user.last_name)}](https://vk.com/id${vkId})
üèô *–ì–æ—Ä–æ–¥:* ${escapeMarkdown(city)}
üîπ *–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω:* ${verified}
‚è≥ *–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:* ${escapeMarkdown(lastSeen)}
üì± *–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:* ${device}
üè∑ *–°—Ç–∞—Ç—É—Å:* ${escapeMarkdown(status)}
üîµ *–û–Ω–ª–∞–π–Ω:* ${online}
üë• *–ü–æ–ª:* ${sex}
üéÇ *–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:* ${bdate} (${zodiacSign})
üìÖ *–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ (API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç)
üì± *–ü—Ä–∏–≤—è–∑–∞–Ω —Ç–µ–ª–µ—Ñ–æ–Ω:* ${hasMobile}
üîë *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ö–æ–¥–∞:* ${hasMobile}
üìß *–ü—Ä–∏–≤—è–∑–∞–Ω–∞ –ø–æ—á—Ç–∞:* ${hasMobile}
üö´ *–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:* ${blacklisted}
üîó *–°–∞–π—Ç:* ${site}
üõ° *VK Premium:* ${isPremium}
üîí *–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è:* ${isClosed}
üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞ —Å—Ç–µ–Ω–µ:* ${wallComments}
‚ù§Ô∏è *–û—Ç–Ω–æ—à–µ–Ω–∏—è:* ${relation}
üé• *–í–∏–¥–µ–æ:* ${videosCount}
üì∏ *–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:* ${photosCount}
üéÅ *–ü–æ–¥–∞—Ä–∫–∏:* ${giftsCount}
üìù *–ó–∞–ø–∏—Å–∏ –Ω–∞ —Å—Ç–µ–Ω–µ:* ${wallPostsCount}
üë´ *–î—Ä—É–∑—å—è:* ${friendsCount}
üë• *–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:* ${followersCount}
üì∏ *–ê–≤–∞—Ç–∞—Ä:*`;

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ –∫–∞–∫ —Ñ–æ—Ç–æ
    bot.sendPhoto(chatId, user.photo_max_orig, {
      caption: profileInfo, 
      parse_mode: "Markdown"
    });

  } catch (error) {
    bot.sendMessage(chatId, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è.");
  }
});

bot.onText(/\/gprofile (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  let groupId = match[1];

  // –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, –∏–∑–≤–ª–µ–∫–∞–µ–º ID
  if (groupId.includes("vk.com/")) {
    const urlParts = groupId.split("/");
    groupId = urlParts[urlParts.length - 1]; // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–ª—ç—à–∞
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ groupId
  if (!groupId) {
    return bot.sendMessage(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ.");
  }

  try {
    const response = await vk.api.groups.getById({
      group_ids: groupId, // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–¥–µ—Å—å –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID
      fields: "photo_200,city,description,counters,verified,cover,website,wall_comments"
    });

    if (!response.length) {
      return bot.sendMessage(chatId, "‚ùå –°–æ–æ–±—â–µ—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –∏–ª–∏ —Å—Å—ã–ª–∫–∏.");
    }

    const group = response[0];
    const city = group.city ? group.city.title : "–ù–µ —É–∫–∞–∑–∞–Ω";
    const verified = group.verified ? "‚úÖ –î–∞" : "‚ùå –ù–µ—Ç";
    const description = group.description || "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è";
    const membersCount = group.counters?.members || 0;
    const photosCount = group.counters?.photos || 0;
    const videosCount = group.counters?.videos || 0;
    const postsCount = group.counters?.posts || 0;
    const website = group.website || "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω";
    const wallComments = group.wall_comments ? "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω—ã" : "‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω—ã";

    // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown
    function escapeMarkdown(text) {
      return text.replace(/([_*[\]()~`>#+\-=|{}.!])/g, "\\$1");
    }

    const groupInfo = `
üë• *–°–æ–æ–±—â–µ—Å—Ç–≤–æ:* [${escapeMarkdown(group.name)}](https://vk.com/${groupId})
üèô *–ì–æ—Ä–æ–¥:* ${escapeMarkdown(city)}
üîπ *–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ:* ${verified}
üìú *–û–ø–∏—Å–∞–Ω–∏–µ:* ${escapeMarkdown(description)}
üîó *–í–µ–±—Å–∞–π—Ç:* ${website}
üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞ —Å—Ç–µ–Ω–µ:* ${wallComments}
üì∏ *–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:* ${photosCount}
üé• *–í–∏–¥–µ–æ:* ${videosCount}
üìù *–ó–∞–ø–∏—Å–∏ –Ω–∞ —Å—Ç–µ–Ω–µ:* ${postsCount}
üë• *–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* ${membersCount}
üñº *–û–±–ª–æ–∂–∫–∞:*`;

    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–ª–æ–∂–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë
    if (group.cover) {
      bot.sendPhoto(chatId, group.cover?.src, {
        caption: groupInfo,
        parse_mode: "Markdown"
      });
    } else {
      bot.sendMessage(chatId, groupInfo, { parse_mode: "Markdown" });
    }

  } catch (error) {
    console.error(error); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    bot.sendMessage(chatId, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –∏ –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç—É–ø–∞.");
  }
});

// üìå –ö–æ–º–∞–Ω–¥–∞ /track <VK_ID> (–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ)
bot.onText(/\/track (\d+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const vkId = match[1];

  db.get("SELECT * FROM tracked_users WHERE vk_id = ?", [vkId], (err, row) => {
    if (err) {
      return bot.sendMessage(chatId, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
    }

    if (row) {
      return bot.sendMessage(chatId, "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.");
    }

    db.run("INSERT INTO tracked_users (vk_id) VALUES (?)", [vkId], (err) => {
      if (err) {
        return bot.sendMessage(chatId, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –±–∞–∑—É.");
      }

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
      bot.sendMessage(chatId, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.");
      
      // –°—Ç–∞—Ä—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
      startTracking(vkId);
    });
  });
});

const userCache = {}; // –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

// üìå –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª—è
async function startTracking(vkId) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const response = await vk.api.users.get({
      user_ids: vkId,
      fields: "friends,photo_max_orig,city,verified,last_seen,status,subscriptions,online,followers_count,common_count,connections,bdate,sex,relation,about,interests,music,books,movies,quotes,followers,groups",
    });

    if (!response.length) {
      console.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.");
      return;
    }

    const user = response[0];
    const currentState = {};

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if (user.friends !== undefined) currentState.friends = user.friends;
    if (user.photo_max_orig !== undefined) currentState.photo_max_orig = user.photo_max_orig;
    if (user.status !== undefined) currentState.status = user.status;
    if (user.subscriptions !== undefined) currentState.subscriptions = user.subscriptions;
    if (user.last_seen !== undefined) currentState.last_seen = user.last_seen.time;
    if (user.city !== undefined && user.city.title !== undefined) currentState.city = user.city.title;
    if (user.verified !== undefined) currentState.verified = user.verified;
    if (user.online !== undefined) currentState.online = user.online;
    if (user.followers_count !== undefined) currentState.followers_count = user.followers_count;
    if (user.common_count !== undefined) currentState.common_count = user.common_count;
    if (user.connections !== undefined) currentState.connections = user.connections;
    if (user.bdate !== undefined) currentState.bdate = user.bdate;
    if (user.sex !== undefined) currentState.sex = user.sex;
    if (user.relation !== undefined) currentState.relation = user.relation;
    if (user.about !== undefined) currentState.about = user.about;
    if (user.interests !== undefined) currentState.interests = user.interests;
    if (user.music !== undefined) currentState.music = user.music;
    if (user.books !== undefined) currentState.books = user.books;
    if (user.movies !== undefined) currentState.movies = user.movies;
    if (user.quotes !== undefined) currentState.quotes = user.quotes;
    if (user.groups !== undefined) currentState.groups = user.groups;

    const events = [];

    // –ó–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if (userCache[vkId]) {
      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π
      if (userCache[vkId].friends && currentState.friends) {
        const newFriends = currentState.friends.filter(friend => !userCache[vkId].friends.includes(friend));
        const removedFriends = userCache[vkId].friends.filter(friend => !currentState.friends.includes(friend));
        
        if (newFriends.length > 0) {
          events.push(`üë• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è: [${user.first_name} ${user.last_name}](https://vk.com/id${vkId}) –¥–æ–±–∞–≤–∏–ª –≤ –¥—Ä—É–∑—å—è: ${newFriends.join(", ")}`);
        }
        if (removedFriends.length > 0) {
          events.push(`üë• –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –¥—Ä—É–∑–µ–π: [${user.first_name} ${user.last_name}](https://vk.com/id${vkId}) —É–¥–∞–ª–∏–ª –∏–∑ –¥—Ä—É–∑–µ–π: ${removedFriends.join(", ")}`);
        }
      }

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫
      if (userCache[vkId].subscriptions && currentState.subscriptions) {
        const newSubscriptions = currentState.subscriptions.filter(sub => !userCache[vkId].subscriptions.includes(sub));
        const removedSubscriptions = userCache[vkId].subscriptions.filter(sub => !currentState.subscriptions.includes(sub));

        if (newSubscriptions.length > 0) {
          events.push(`üì≤ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞: ${newSubscriptions.join(", ")}`);
        }
        if (removedSubscriptions.length > 0) {
          events.push(`üìâ –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞: ${removedSubscriptions.join(", ")}`);
        }
      }

      // –ü—Ä–æ—á–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      if (userCache[vkId].photo_max_orig !== currentState.photo_max_orig) {
        events.push(`üì∏ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: [–°–º–æ—Ç—Ä–µ—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ](${user.photo_max_orig})`);
      }
      if (userCache[vkId].status !== currentState.status) {
        events.push(`üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞: ${user.status}`);
      }
      if (userCache[vkId].last_seen !== currentState.last_seen) {
        const statusEmoji = currentState.last_seen > Date.now() / 1000 ? "‚úÖ –í —Å–µ—Ç–∏" : "‚ùå –í—ã—à–µ–ª –∏–∑ —Å–µ—Ç–∏";
        events.push(`üåê –°—Ç–∞—Ç—É—Å —Å–µ—Ç–∏: ${statusEmoji}`);
      }
      if (userCache[vkId].city !== currentState.city) {
        events.push(`üèô –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞: ${user.city.title}`);
      }
      if (userCache[vkId].verified !== currentState.verified) {
        events.push(`üîπ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: ${currentState.verified ? "‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω" : "‚ùå –ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"}`);
      }
      if (userCache[vkId].online !== currentState.online) {
        events.push(`üí¨ –°—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω: ${currentState.online === 1 ? "‚úÖ –û–Ω–ª–∞–π–Ω" : "‚ùå –ù–µ –æ–Ω–ª–∞–π–Ω"}`);
      }
      if (userCache[vkId].followers_count !== currentState.followers_count) {
        events.push(`üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${user.followers_count}`);
      }
      if (userCache[vkId].common_count !== currentState.common_count) {
        events.push(`üë´ –û–±—â–∏–µ –¥—Ä—É–∑—å—è: ${user.common_count}`);
      }
      if (userCache[vkId].connections !== currentState.connections) {
        if (currentState.connections) {
          if (currentState.connections.facebook) events.push(`üîó Facebook: [–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å](https://www.facebook.com/${currentState.connections.facebook})`);
          if (currentState.connections.instagram) events.push(`üì∑ Instagram: [–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å](https://www.instagram.com/${currentState.connections.instagram})`);
          if (currentState.connections.twitter) events.push(`üê¶ Twitter: [–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å](https://twitter.com/${currentState.connections.twitter})`);
        }
      }
      if (userCache[vkId].bdate !== currentState.bdate) {
        events.push(`üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${currentState.bdate}`);
      }
      if (userCache[vkId].sex !== currentState.sex) {
        events.push(`üë§ –ü–æ–ª: ${currentState.sex === 1 ? "üë© –ñ–µ–Ω—Å–∫–∏–π" : currentState.sex === 2 ? "üë® –ú—É–∂—Å–∫–æ–π" : "‚ùì –ù–µ —É–∫–∞–∑–∞–Ω"}`);
      }
      if (userCache[vkId].relation !== currentState.relation) {
        const relationStatuses = ["–ù–µ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö", "–í—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è", "–ü–æ–º–æ–ª–≤–ª–µ–Ω", "–ñ–µ–Ω–∞—Ç", "–í –ø–æ–∏—Å–∫–µ", "–í –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö", "–†–∞–∑–≤–æ–¥"];
        events.push(`üíç –û—Ç–Ω–æ—à–µ–Ω–∏—è: ${relationStatuses[currentState.relation] || "–ù–µ —É–∫–∞–∑–∞–Ω"}`);
      }
      if (userCache[vkId].about !== currentState.about) {
        events.push(`üìù –û —Å–µ–±–µ: ${currentState.about}`);
      }
      if (userCache[vkId].interests !== currentState.interests) {
        events.push(`üéØ –ò–Ω—Ç–µ—Ä–µ—Å—ã: ${currentState.interests}`);
      }
      if (userCache[vkId].music !== currentState.music) {
        events.push(`üé∂ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: ${currentState.music}`);
      }
      if (userCache[vkId].books !== currentState.books) {
        events.push(`üìö –ö–Ω–∏–≥–∏: ${currentState.books}`);
      }
      if (userCache[vkId].movies !== currentState.movies) {
        events.push(`üé¨ –§–∏–ª—å–º—ã: ${currentState.movies}`);
      }
      if (userCache[vkId].quotes !== currentState.quotes) {
        events.push(`üí¨ –¶–∏—Ç–∞—Ç—ã: ${currentState.quotes}`);
      }
      if (userCache[vkId].groups !== currentState.groups) {
        const groupEvents = currentState.groups.map(group => `üîî –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ: [${group.name}](https://vk.com/club${group.id})`);
        events.push(...groupEvents);

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–ø–∏—Å–∫–µ –æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
        const oldGroups = userCache[vkId].groups.filter(group => !currentState.groups.some(g => g.id === group.id));
        oldGroups.forEach(group => {
          events.push(`üìâ –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞: [${group.name}](https://vk.com/club${group.id})`);
        });
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userCache[vkId] = currentState;

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏
    if (events.length > 0) {
      bot.sendMessage(process.env.ADMIN_CHAT_ID, `üìã –õ–æ–≥–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [${user.first_name} ${user.last_name}](https://vk.com/id${vkId}):\n${events.join("\n")}`, { parse_mode: "Markdown" });
    }

  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${vkId}: ${error.message}`);
  }
}


// üìå –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
async function periodicTracking() {
  const users = await new Promise((resolve) => {
    db.all("SELECT vk_id FROM tracked_users", [], (err, rows) => {
      if (err) resolve([]);
      resolve(rows.map((row) => row.vk_id));
    });
  });

  for (const vkId of users) {
    await startTracking(vkId);
  }
}

// üìå –∫–æ–º–∞–Ω–¥–∞ info
bot.onText(/\/info (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const vkId = match[1];  // Use vkId from the command input

  async function getVkUserId(input) {
    try {
      const vkUser = await vk.api.users.get({ user_ids: input });
      if (vkUser && vkUser.length > 0) {
        return vkUser[0].id;
      }
      return null;
    } catch (error) {
      console.error("Error fetching VK user ID:", error);
      return null;
    }
  }

  function getPlatform(platformId) {
    switch (platformId) {
      case 1:
        return '–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ';
      case 2:
        return '–ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è';
      case 3:
        return '–î–µ—Å–∫—Ç–æ–ø–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ';
      case 4:
        return '–í–µ–±-–≤–µ—Ä—Å–∏—è';
      default:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  }

  function getElapsedTime(lastSeenTime) {
    const now = Date.now() / 1000;  // Current time in seconds
    const diff = now - lastSeenTime; // Difference between current time and last seen time
  
    const minutes = Math.floor(diff / 60);
    const hours = Math.floor(diff / 3600);
    const days = Math.floor(diff / 86400);
  
    if (days > 0) {
      return `${days} –¥–Ω. –Ω–∞–∑–∞–¥`;
    } else if (hours > 0) {
      return `${hours} —á. –Ω–∞–∑–∞–¥`;
    } else if (minutes > 0) {
      return `${minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥`;
    } else {
      return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
    }
  }

  try {
    const userId = await getVkUserId(vkId);  // Pass vkId here
    if (!userId) {
      return bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—å.');
    }

    const profile = await vk.api.users.get({
      user_ids: userId,
      fields: 'photo_200, last_seen, counters, online, online_mobile, bdate, city, country, sex, status, education, home_town, followers_count'
    });

    if (!profile.length) {
      return bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.');
    }

    const user = profile[0];
    const lastSeenTime = user.last_seen ? new Date(user.last_seen.time * 1000).toLocaleString() : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const lastSeenPlatform = getPlatform(user.last_seen?.platform);
    const elapsedTime = user.last_seen ? getElapsedTime(user.last_seen.time) : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

    const profilePic = user.photo_200 || '';
    const city = user.city ? user.city.title : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    const country = user.country ? user.country.title : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    const sex = user.sex === 1 ? '–ñ–µ–Ω—Å–∫–∏–π' : user.sex === 2 ? '–ú—É–∂—Å–∫–æ–π' : '–ù–µ —É–∫–∞–∑–∞–Ω';
    const education = user.education ? `${user.education.university_name}, ${user.education.faculty_name}, ${user.education.chair_name}` : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    const homeTown = user.home_town || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    const status = user.status || '–ù–µ—Ç —Å—Ç–∞—Ç—É—Å–∞';
    const birthday = user.bdate || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
    const followers = user.counters?.followers || 0;  // Followers count
    const friends = user.counters?.friends || 0;  // Friends count

    const htmlContent = generateHtml(user, profilePic, lastSeenTime, lastSeenPlatform, elapsedTime, city, country, sex, education, homeTown, status, birthday, followers, friends);
    const filePath = path.join(__dirname, `profile_${user.id}.html`);

    fs.writeFileSync(filePath, htmlContent);

    bot.sendDocument(chatId, filePath, { caption: "üîó –û—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –±—Ä–∞—É–∑–µ—Ä–µ" }).then(() => {
      fs.unlinkSync(filePath);
    });

  } catch (error) {
    console.error(error);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.');
  }
});

function generateHtml(user, profilePic, lastSeenTime, lastSeenPlatform, elapsedTime, city, country, sex, education, homeTown, status, birthday, followers, friends) {
  return `<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>–ü—Ä–æ—Ñ–∏–ª—å –í–ö–æ–Ω—Ç–∞–∫—Ç–µ</title>
  <style>
    body { 
      font-family: Arial, sans-serif; 
      background: linear-gradient(45deg, #ff0000, #ff7300, #fffb00, #00ff00, #0000ff, #8a00ff); 
      background-size: 400% 400%; 
      animation: gradientAnimation 15s ease infinite; 
      text-align: center; 
      margin: 0; 
      padding: 0; 
      min-height: 100vh;
      color: white; /* –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç */
    }
    @keyframes gradientAnimation { 
      0% { background-position: 0% 50%; } 
      50% { background-position: 100% 50%; } 
      100% { background-position: 0% 50%; } 
    }
    .container { 
      width: 300px; 
      background: rgba(0, 0, 0, 0.8); 
      padding: 15px; 
      margin: 50px auto; 
      border-radius: 10px; 
      box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.2); 
    }
    .avatar { 
      width: 80px; 
      height: 80px; 
      border-radius: 50%; 
      margin-bottom: 10px; 
    }
    .info { 
      text-align: left; 
      font-size: 14px; 
    }
    footer { 
      position: fixed; 
      bottom: 10px; 
      width: 100%; 
      text-align: center; 
      font-size: 12px; 
      color: white; 
      background-color: rgba(0, 0, 0, 0.5); 
      padding: 5px 0; 
    }
    footer a { color: #fffb00; text-decoration: none; }
  </style>
</head>
<body>
  <div class="container">
    <img src="${profilePic}" class="avatar" alt="–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è">
    <h2>${user.first_name} ${user.last_name}</h2>
    <div class="info">
      <p><b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:</b> ${lastSeenTime} (${elapsedTime})</p>
      <p><b>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</b> ${lastSeenPlatform}</p>
      <p><b>–ì–æ—Ä–æ–¥:</b> ${city}</p>
      <p><b>–°—Ç—Ä–∞–Ω–∞:</b> ${country}</p>
      <p><b>–ü–æ–ª:</b> ${sex}</p>
      <p><b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> ${birthday}</p>
      <p><b>–°—Ç–∞—Ç—É—Å:</b> ${status}</p>
      <p><b>–†–æ–¥–Ω–æ–π –≥–æ—Ä–æ–¥:</b> ${homeTown}</p>
      <p><b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b> ${education}</p>
      <p><b>–î—Ä—É–∑—å—è:</b> ${friends}</p>
      <p><b>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:</b> ${followers}</p>
    </div>
  </div>
  <footer>Developer INK</footer>
</body>
</html>`; 
}

// –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
setInterval(periodicTracking, 10 * 1000); // 10 —Å–µ–∫—É–Ω–¥
