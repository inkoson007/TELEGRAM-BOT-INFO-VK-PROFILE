require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");
const { VK } = require("vk-io");
const sqlite3 = require("sqlite3").verbose();
const path = require('path');
const fs = require('fs');
const axios = require('axios');
const { createCanvas, loadImage } = require("canvas");
const { exec } = require('child_process');
const os = require('os');
const moment = require('moment');
const osu = require('os-utils');


const allowedAdmins = [1364548192];  // –ú–∞—Å—Å–∏–≤ —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É, –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞ @userinfobot

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
const db = new sqlite3.Database("tracking.db", (err) => {
  if (err) console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:", err.message);
  else console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite.");
});

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  version: '2.1',
  author: 'INK'
};

// –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
function showWelcomeMessage() {
  console.log('\x1b[36m%s\x1b[0m', '‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
  console.log('\x1b[36m%s\x1b[0m', `‚ïë            VK –®–ø–∏–æ–Ω v${config.version}           ‚ïë`);
  console.log('\x1b[36m%s\x1b[0m', '‚ïü‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ï¢');
  console.log('\x1b[36m%s\x1b[0m', `‚ïë  –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: ${config.author}                  ‚ïë`);
  console.log('\x1b[36m%s\x1b[0m', '‚ïë                                            ‚ïë');
  console.log('\x1b[36m%s\x1b[0m', '‚ïë  –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...                            ‚ïë');
  console.log('\x1b[36m%s\x1b[0m', '‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
  console.log('\x1b[33m%s\x1b[0m', `‚åõ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π...`);
}

const chatId = process.env.ADMIN_CHAT_ID;
if (!chatId) {
  console.error('Admin chat ID is missing or invalid');
  return;
}


// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
db.run(`CREATE TABLE IF NOT EXISTS tracked_users (id INTEGER PRIMARY KEY AUTOINCREMENT, vk_id TEXT UNIQUE NOT NULL)`);
db.run(`CREATE TABLE IF NOT EXISTS user_logs (id INTEGER PRIMARY KEY AUTOINCREMENT, vk_id TEXT, action TEXT, timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)`);
db.run(`CREATE TABLE IF NOT EXISTS tracking_settings (vk_id TEXT UNIQUE NOT NULL, notify_friends BOOLEAN DEFAULT 1, notify_name BOOLEAN DEFAULT 1, notify_avatar BOOLEAN DEFAULT 1, notify_city BOOLEAN DEFAULT 1, notify_verified BOOLEAN DEFAULT 1, notify_last_seen BOOLEAN DEFAULT 1, notify_status BOOLEAN DEFAULT 1, notify_link BOOLEAN DEFAULT 1)`);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });
const vk = new VK({ token: process.env.VK_ACCESS_TOKEN });
showWelcomeMessage();

// üìå –ö–æ–º–∞–Ω–¥–∞ /start (–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ)
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, `üëã –ü—Ä–∏–≤–µ—Ç, ${msg.from.first_name}!
–Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª–µ–π –í–ö–æ–Ω—Ç–∞–∫—Ç–µ. Version 1.9.2

üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.`);
});

// –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
const knownCommands = [
  '/start', '/help', '/track', '/profile', '/gprofile', '/info',
  '/ginfo', '/photo', '/–¥—Ä—É–∑—å—è', '/–ø–æ–¥–ø–∏—Å—á–∏–∫–∏', '/–ø–æ–¥–ø–∏—Å–∫–∏',
  '/—É—á–∞—Å—Ç–Ω–∏–∫–∏', '/id', '/gid', '/statistic', '/like', '/post', '/–æ–±—â–µ–Ω–∏–µ',
  '/settings', '/update'
];

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text.trim();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π
  if (text.startsWith('/')) {
    const command = text.split(' ')[0];
    if (!knownCommands.includes(command)) {
      bot.sendMessage(chatId, '‚ùó –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç.\n\nüìå –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —Å –ø–æ–º–æ—â—å—é /help', {
        parse_mode: 'Markdown'
      });
    }
  }
});

// üìå –ö–æ–º–∞–Ω–¥–∞ /help (–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥)
bot.onText(/\/help/, (msg) => {
    const chatId = msg.chat.id;
  
    function escapeMarkdown(text) {
      return text.replace(/([_*[\]()~`>#+\-=|{}.!])/g, "\\$1");
    }
  
    const helpMessage = `
    ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
    üìå /start - ${escapeMarkdown("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")}
    üìå /help - ${escapeMarkdown("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")}
    üìå /track <id> - ${escapeMarkdown("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ")}
    üìå /profile <id> - ${escapeMarkdown("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ VK")}
    üìå /gprofile <id –∏–ª–∏ —Å—Å—ã–ª–∫–∞> - ${escapeMarkdown("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ VK")}
    üìå /info <id> - ${escapeMarkdown("–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ –≤ html")}
    üìå /ginfo <id –∏–ª–∏ —Å—Å—ã–ª–∫–∞> - ${escapeMarkdown("–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –≤ html")}
    üìå /photo <id> - ${escapeMarkdown("–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ –≤ –∫–∞—Ä—Ç–∏–Ω–∫–µ")}
    üìå /–¥—Ä—É–∑—å—è <id> - ${escapeMarkdown("–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä—É–∑—å—è—Ö")}
    üìå /–ø–æ–¥–ø–∏—Å—á–∏–∫–∏ <id> - ${escapeMarkdown("–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞—Ö")}
    üìå /–ø–æ–¥–ø–∏—Å–∫–∏ <id> - ${escapeMarkdown("–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞—Ö")}
    üìå /—É—á–∞—Å—Ç–Ω–∏–∫–∏ <—Å—Å—ã–ª–∫–∞ –∏–ª–∏ id> - ${escapeMarkdown("–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã")}
    üìå /id <—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å> - ${escapeMarkdown("–ü–æ–ª—É—á–∏—Ç—å id –ø—Ä–æ—Ñ–∏–ª—è")}
    üìå /gid <—Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É> - ${escapeMarkdown("–ü–æ–ª—É—á–∏—Ç—å id –≥—Ä—É–ø–ø—ã")}
    üìå /statistic <id> - ${escapeMarkdown("–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥—Ä—É–∑–µ–π")}
    üìå /like <id> - ${escapeMarkdown("–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–∞–π–∫–æ–≤")}
    üìå /post <id> - ${escapeMarkdown("–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã –∏ —Ä–µ–ø–æ—Å—Ç—ã")}
    üìå /settings - ${escapeMarkdown("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞")}
    üìå /update - ${escapeMarkdown("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")}
    üí° ${escapeMarkdown("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.")} 
    `;
  
    bot.sendMessage(chatId, helpMessage, { parse_mode: "Markdown" });
  });

// üìå –ö–æ–º–∞–Ω–¥–∞ /profile <VK_ID> (–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ñ–∏–ª–µ)
bot.onText(/\/profile (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  let vkId = match[1];

  // –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å, –∏–∑–≤–ª–µ–∫–∞–µ–º ID
  if (vkId.includes("vk.com/")) {
    const urlParts = vkId.split("/");
    vkId = urlParts[urlParts.length - 1]; // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–ª—ç—à–∞
  }

  try {
    const response = await vk.api.users.get({
      user_ids: vkId,
      fields: "photo_max_orig,city,verified,last_seen,status,online,sex,bdate,about,counters,has_mobile,blacklisted,site,relation,relation_partner,is_closed,career,military,photo_id,is_premium,wall_comments,cover"
    });

    if (!response.length) return bot.sendMessage(chatId, "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");

    const user = response[0];
    const lastSeen = user.last_seen ? new Date(user.last_seen.time * 1000).toLocaleString() : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    const city = user.city ? user.city.title : "–ù–µ —É–∫–∞–∑–∞–Ω";
    const verified = user.verified ? "‚úÖ –î–∞" : "‚ùå –ù–µ—Ç";
    const status = user.status || "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç";
    const online = user.online ? "üü¢ –û–Ω–ª–∞–π–Ω" : "üî¥ –û—Ñ–ª–∞–π–Ω";
    const sex = user.sex === 1 ? "üë© –ñ–µ–Ω—â–∏–Ω–∞" : user.sex === 2 ? "üë® –ú—É–∂—á–∏–Ω–∞" : "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
    const bdate = user.bdate || "–ù–µ —É–∫–∞–∑–∞–Ω–∞";
    const about = user.about || "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è";
    const friendsCount = user.counters?.friends || 0;
    const followersCount = user.counters?.followers || 0;
    const photosCount = user.counters?.photos || 0;
    const videosCount = user.counters?.videos || 0;
    const giftsCount = user.counters?.gifts || 0;
    const wallPostsCount = user.counters?.posts || 0;
    const hasMobile = user.has_mobile ? "üì± –ü—Ä–∏–≤—è–∑–∞–Ω" : "‚ùå –ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω";
    const blacklisted = user.blacklisted ? "üö´ –í –ß–° —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" : "‚úÖ –ù–µ—Ç";
    const site = user.site ? user.site : "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω";
    const isClosed = user.is_closed ? "üîí –ó–∞–∫—Ä—ã—Ç—ã–π –ø—Ä–æ—Ñ–∏–ª—å" : "üåç –û—Ç–∫—Ä—ã—Ç—ã–π –ø—Ä–æ—Ñ–∏–ª—å";
    const isPremium = user.is_premium ? "üíé VK Premium" : "‚ùå –ù–µ—Ç";
    const wallComments = user.wall_comments ? "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω—ã" : "‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω—ã";

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞
    function getZodiacSign(date) {
      if (!date) return "–ù–µ —É–∫–∞–∑–∞–Ω";
      const [day, month] = date.split(".").map(Number);
      const zodiacSigns = [
        "‚ôë –ö–æ–∑–µ—Ä–æ–≥", "‚ôí –í–æ–¥–æ–ª–µ–π", "‚ôì –†—ã–±—ã", "‚ôà –û–≤–µ–Ω", "‚ôâ –¢–µ–ª–µ—Ü", "‚ôä –ë–ª–∏–∑–Ω–µ—Ü—ã",
        "‚ôã –†–∞–∫", "‚ôå –õ–µ–≤", "‚ôç –î–µ–≤–∞", "‚ôé –í–µ—Å—ã", "‚ôè –°–∫–æ—Ä–ø–∏–æ–Ω", "‚ôê –°—Ç—Ä–µ–ª–µ—Ü"
      ];
      const zodiacDates = [20, 19, 20, 20, 21, 21, 22, 22, 22, 23, 23, 21];
      return day > zodiacDates[month - 1] ? zodiacSigns[month] : zodiacSigns[month - 1];
    }

    const zodiacSign = getZodiacSign(user.bdate);

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π
    const relationTypes = [
      "–ù–µ —É–∫–∞–∑–∞–Ω–æ", "‚ù£Ô∏è –í–ª—é–±–ª–µ–Ω(–∞)", "üíç –ü–æ–º–æ–ª–≤–ª–µ–Ω(–∞)", "üíë –í –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö",
      "‚ù§Ô∏è –ñ–µ–Ω–∞—Ç/–ó–∞–º—É–∂–µ–º", "üíî –í—Å–µ —Å–ª–æ–∂–Ω–æ", "üíî –í –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ–∏—Å–∫–µ", "üö´ –ù–µ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö"
    ];
    let relation = relationTypes[user.relation] || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
    if (user.relation_partner) {
      relation += ` —Å [${user.relation_partner.first_name} ${user.relation_partner.last_name}](https://vk.com/id${user.relation_partner.id})`;
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–ü–ö –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω)
    const device = user.last_seen?.platform ? (user.last_seen.platform > 6 ? "üì± –¢–µ–ª–µ—Ñ–æ–Ω" : "üíª –ö–æ–º–ø—å—é—Ç–µ—Ä") : "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";

    // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown
    function escapeMarkdown(text) {
      return text.replace(/([_*[\]()~`>#+\-=|{}.!])/g, "\\$1");
    }

    const profileInfo = `
üë§ *–ü—Ä–æ—Ñ–∏–ª—å VK:* [${escapeMarkdown(user.first_name)} ${escapeMarkdown(user.last_name)}](https://vk.com/id${vkId})
üèô *–ì–æ—Ä–æ–¥:* ${escapeMarkdown(city)}
üîπ *–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω:* ${verified}
‚è≥ *–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:* ${escapeMarkdown(lastSeen)}
üì± *–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:* ${device}
üè∑ *–°—Ç–∞—Ç—É—Å:* ${escapeMarkdown(status)}
üîµ *–û–Ω–ª–∞–π–Ω:* ${online}
üë• *–ü–æ–ª:* ${sex}
üéÇ *–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:* ${bdate} (${zodiacSign})
üìÖ *–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ (API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç)
üì± *–ü—Ä–∏–≤—è–∑–∞–Ω —Ç–µ–ª–µ—Ñ–æ–Ω:* ${hasMobile}
üîë *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ö–æ–¥–∞:* ${hasMobile}
üìß *–ü—Ä–∏–≤—è–∑–∞–Ω–∞ –ø–æ—á—Ç–∞:* ${hasMobile}
üö´ *–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:* ${blacklisted}
üîó *–°–∞–π—Ç:* ${site}
üõ° *VK Premium:* ${isPremium}
üîí *–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è:* ${isClosed}
üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞ —Å—Ç–µ–Ω–µ:* ${wallComments}
‚ù§Ô∏è *–û—Ç–Ω–æ—à–µ–Ω–∏—è:* ${relation}
üé• *–í–∏–¥–µ–æ:* ${videosCount}
üì∏ *–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:* ${photosCount}
üéÅ *–ü–æ–¥–∞—Ä–∫–∏:* ${giftsCount}
üìù *–ó–∞–ø–∏—Å–∏ –Ω–∞ —Å—Ç–µ–Ω–µ:* ${wallPostsCount}
üë´ *–î—Ä—É–∑—å—è:* ${friendsCount}
üë• *–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:* ${followersCount}
üì∏ *–ê–≤–∞—Ç–∞—Ä:*`;

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ –∏ –æ–±–ª–æ–∂–∫–∏ –∫–∞–∫ —Ñ–æ—Ç–æ
    const cover = user.cover ? user.cover.photo_800 : null; // –ü–æ–ª—É—á–∞–µ–º –æ–±–ª–æ–∂–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    const media = cover || user.photo_max_orig; // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–ª–æ–∂–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë, –∏–Ω–∞—á–µ –∞–≤–∞—Ç–∞—Ä
    bot.sendPhoto(chatId, media, {
      caption: profileInfo, 
      parse_mode: "Markdown"
    });

  } catch (error) {
    bot.sendMessage(chatId, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è.");
  }
});

// üìå –ö–æ–º–∞–Ω–¥–∞ /gprofile 
bot.onText(/\/gprofile (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  let groupId = match[1].trim(); // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

  const vkUrlPattern = /(?:https?:\/\/)?(?:www\.)?vk\.com\/(club|public|event)?(\d+|[a-zA-Z0-9_.-]+)/;
  const matchResult = groupId.match(vkUrlPattern);

  if (matchResult) {
    groupId = matchResult[2] || matchResult[1];
    
    if (isNaN(groupId)) {
      try {
        const resolveResponse = await axios.get("https://api.vk.com/method/utils.resolveScreenName", {
          params: {
            screen_name: groupId,
            access_token: process.env.VK_ACCESS_TOKEN,
            v: "5.199",
          },
        });

        if (resolveResponse.data.error) {
          return bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ VK API: ${resolveResponse.data.error.error_msg}`);
        }

        const resolved = resolveResponse.data.response;
        if (!resolved || resolved.type !== "group") {
          return bot.sendMessage(chatId, "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å—Å—ã–ª–∫–∏.");
        }

        groupId = resolved.object_id;
      } catch (error) {
        return bot.sendMessage(chatId, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–º–µ–Ω–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏.");
      }
    }
  }

  try {
    const groupResponse = await axios.get("https://api.vk.com/method/groups.getById", {
      params: {
        group_id: groupId,
        fields: "photo_200,city,description,members_count,verified,cover,website",
        access_token: process.env.VK_ACCESS_TOKEN,
        v: "5.199",
      },
    });

    if (groupResponse.data.error) {
      return bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ VK API: ${groupResponse.data.error.error_msg}`);
    }

    const group = groupResponse.data.response?.groups?.[0];  // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞ groups

    if (!group) {
      return bot.sendMessage(chatId, "‚ùå –°–æ–æ–±—â–µ—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –∏–ª–∏ —Å—Å—ã–ª–∫–∏.");
    }

    const city = group.city?.title || "–ù–µ —É–∫–∞–∑–∞–Ω";
    const verified = group.verified ? "‚úÖ –î–∞" : "‚ùå –ù–µ—Ç";
    const description = group.description || "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è";
    const membersCount = group.members_count || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    const website = group.website || "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω";
    const cover = group.cover?.images?.pop()?.url || null; // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    const avatar = group.photo_200 || null; // –ê–≤–∞—Ç–∞—Ä–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞

    function escapeMarkdown(text) {
      return text.replace(/([_*[\]()~`>#+\-=|{}.!])/g, "\\$1");
    }

    const groupInfo = ` 
üë• *–°–æ–æ–±—â–µ—Å—Ç–≤–æ:* [${escapeMarkdown(group.name)}](https://vk.com/club${groupId})
üèô *–ì–æ—Ä–æ–¥:* ${escapeMarkdown(city)}
üîπ *–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ:* ${verified}
üìú *–û–ø–∏—Å–∞–Ω–∏–µ:* ${escapeMarkdown(description)}
üîó *–í–µ–±—Å–∞–π—Ç:* ${website}
üë• *–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* ${membersCount}
üñº *–ê–≤–∞—Ç–∞—Ä–∫–∞:*`;

    const sendMessageOptions = {
      caption: groupInfo,
      parse_mode: "Markdown",
    };

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–≤–∞—Ç–∞—Ä–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë
    if (avatar) {
      sendMessageOptions.caption = `üñº *–ê–≤–∞—Ç–∞—Ä–∫–∞:*`;
      bot.sendPhoto(chatId, avatar, sendMessageOptions);
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–ª–æ–∂–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë
    if (cover) {
      sendMessageOptions.caption = groupInfo;
      bot.sendPhoto(chatId, cover, sendMessageOptions);
    } else {
      bot.sendMessage(chatId, groupInfo, { parse_mode: "Markdown" });
    }
  } catch (error) {
    bot.sendMessage(chatId, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –∏–ª–∏ ID.");
  }
});

// üìå –ö–æ–º–∞–Ω–¥–∞ /track <VK_ID> (–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ)
bot.onText(/\/track (\d+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const vkId = match[1];

 // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
 if (!allowedAdmins.includes(chatId)) {
  return bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
}

  db.get("SELECT * FROM tracked_users WHERE vk_id = ?", [vkId], (err, row) => {
    if (err) {
      return bot.sendMessage(chatId, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
    }

    if (row) {
      return bot.sendMessage(chatId, "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.");
    }

    db.run("INSERT INTO tracked_users (vk_id) VALUES (?)", [vkId], (err) => {
      if (err) {
        return bot.sendMessage(chatId, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –±–∞–∑—É.");
      }
    
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
      bot.sendMessage(chatId, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.");
      
      // –°—Ç–∞—Ä—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
      startTracking(vkId)
    });
  });
});

const userCache = {}; // –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

// üìå –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª—è
async function startTracking(vkId) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const response = await vk.api.users.get({
      user_ids: vkId,
      fields: "friends,photo_max_orig,city,verified,last_seen,status,subscriptions,online,followers_count,common_count,connections,bdate,sex,relation,about,interests,music,books,movies,quotes,followers,groups",
    });

    if (!response.length) {
      console.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.");
      return;
    }

    const user = response[0];
    const currentState = {};

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if (user.friends !== undefined) currentState.friends = user.friends;
    if (user.photo_max_orig !== undefined) currentState.photo_max_orig = user.photo_max_orig;
    if (user.status !== undefined) currentState.status = user.status;
    if (user.subscriptions !== undefined) currentState.subscriptions = user.subscriptions;
    if (user.last_seen !== undefined) currentState.last_seen = user.last_seen.time;
    if (user.city !== undefined && user.city.title !== undefined) currentState.city = user.city.title;
    if (user.verified !== undefined) currentState.verified = user.verified;
    if (user.online !== undefined) currentState.online = user.online;
    if (user.followers_count !== undefined) currentState.followers_count = user.followers_count;
    if (user.common_count !== undefined) currentState.common_count = user.common_count;
    if (user.connections !== undefined) currentState.connections = user.connections;
    if (user.bdate !== undefined) currentState.bdate = user.bdate;
    if (user.sex !== undefined) currentState.sex = user.sex;
    if (user.relation !== undefined) currentState.relation = user.relation;
    if (user.about !== undefined) currentState.about = user.about;
    if (user.interests !== undefined) currentState.interests = user.interests;
    if (user.music !== undefined) currentState.music = user.music;
    if (user.books !== undefined) currentState.books = user.books;
    if (user.movies !== undefined) currentState.movies = user.movies;
    if (user.quotes !== undefined) currentState.quotes = user.quotes;
    if (user.groups !== undefined) currentState.groups = user.groups;

    const events = [];

    // –ó–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if (userCache[vkId]) {
      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π
      if (userCache[vkId].friends && currentState.friends) {
        const newFriends = currentState.friends.filter(friend => !userCache[vkId].friends.includes(friend));
        const removedFriends = userCache[vkId].friends.filter(friend => !currentState.friends.includes(friend));
        
        if (newFriends.length > 0) {
          events.push(`üë• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è: [${user.first_name} ${user.last_name}](https://vk.com/id${vkId}) –¥–æ–±–∞–≤–∏–ª –≤ –¥—Ä—É–∑—å—è: ${newFriends.join(", ")}`);
        }
        if (removedFriends.length > 0) {
          events.push(`üë• –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –¥—Ä—É–∑–µ–π: [${user.first_name} ${user.last_name}](https://vk.com/id${vkId}) —É–¥–∞–ª–∏–ª –∏–∑ –¥—Ä—É–∑–µ–π: ${removedFriends.join(", ")}`);
        }
      }

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫
      if (userCache[vkId].subscriptions && currentState.subscriptions) {
        const newSubscriptions = currentState.subscriptions.filter(sub => !userCache[vkId].subscriptions.includes(sub));
        const removedSubscriptions = userCache[vkId].subscriptions.filter(sub => !currentState.subscriptions.includes(sub));

        if (newSubscriptions.length > 0) {
          events.push(`üì≤ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞: ${newSubscriptions.join(", ")}`);
        }
        if (removedSubscriptions.length > 0) {
          events.push(`üìâ –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞: ${removedSubscriptions.join(", ")}`);
        }
      }

      // –ü—Ä–æ—á–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      if (userCache[vkId].photo_max_orig !== currentState.photo_max_orig) {
        events.push(`üì∏ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: [–°–º–æ—Ç—Ä–µ—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ](${user.photo_max_orig})`);
      }
      if (userCache[vkId].status !== currentState.status) {
        events.push(`üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞: ${user.status}`);
      }
      if (userCache[vkId].last_seen !== currentState.last_seen) {
        const statusEmoji = currentState.last_seen > Date.now() / 1000 ? "‚úÖ –í —Å–µ—Ç–∏" : "‚ùå –í—ã—à–µ–ª –∏–∑ —Å–µ—Ç–∏";
        events.push(`üåê –°—Ç–∞—Ç—É—Å —Å–µ—Ç–∏: ${statusEmoji}`);
      }
      if (userCache[vkId].city !== currentState.city) {
        events.push(`üèô –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞: ${user.city.title}`);
      }
      if (userCache[vkId].verified !== currentState.verified) {
        events.push(`üîπ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: ${currentState.verified ? "‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω" : "‚ùå –ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"}`);
      }
      if (userCache[vkId].online !== currentState.online) {
        events.push(`üí¨ –°—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω: ${currentState.online === 1 ? "‚úÖ –û–Ω–ª–∞–π–Ω" : "‚ùå –ù–µ –æ–Ω–ª–∞–π–Ω"}`);
      }
      if (userCache[vkId].followers_count !== currentState.followers_count) {
        events.push(`üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${user.followers_count}`);
      }
      if (userCache[vkId].common_count !== currentState.common_count) {
        events.push(`üë´ –û–±—â–∏–µ –¥—Ä—É–∑—å—è: ${user.common_count}`);
      }
      if (userCache[vkId].connections !== currentState.connections) {
        if (currentState.connections) {
          if (currentState.connections.facebook) events.push(`üîó Facebook: [–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å](https://www.facebook.com/${currentState.connections.facebook})`);
          if (currentState.connections.instagram) events.push(`üì∑ Instagram: [–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å](https://www.instagram.com/${currentState.connections.instagram})`);
          if (currentState.connections.twitter) events.push(`üê¶ Twitter: [–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å](https://twitter.com/${currentState.connections.twitter})`);
        }
      }
      if (userCache[vkId].bdate !== currentState.bdate) {
        events.push(`üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${currentState.bdate}`);
      }
      if (userCache[vkId].sex !== currentState.sex) {
        events.push(`üë§ –ü–æ–ª: ${currentState.sex === 1 ? "üë© –ñ–µ–Ω—Å–∫–∏–π" : currentState.sex === 2 ? "üë® –ú—É–∂—Å–∫–æ–π" : "‚ùì –ù–µ —É–∫–∞–∑–∞–Ω"}`);
      }
      if (userCache[vkId].relation !== currentState.relation) {
        const relationStatuses = ["–ù–µ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö", "–í—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è", "–ü–æ–º–æ–ª–≤–ª–µ–Ω", "–ñ–µ–Ω–∞—Ç", "–í –ø–æ–∏—Å–∫–µ", "–í –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö", "–†–∞–∑–≤–æ–¥"];
        events.push(`üíç –û—Ç–Ω–æ—à–µ–Ω–∏—è: ${relationStatuses[currentState.relation] || "–ù–µ —É–∫–∞–∑–∞–Ω"}`);
      }
      if (userCache[vkId].about !== currentState.about) {
        events.push(`üìù –û —Å–µ–±–µ: ${currentState.about}`);
      }
      if (userCache[vkId].interests !== currentState.interests) {
        events.push(`üéØ –ò–Ω—Ç–µ—Ä–µ—Å—ã: ${currentState.interests}`);
      }
      if (userCache[vkId].music !== currentState.music) {
        events.push(`üé∂ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: ${currentState.music}`);
      }
      if (userCache[vkId].books !== currentState.books) {
        events.push(`üìö –ö–Ω–∏–≥–∏: ${currentState.books}`);
      }
      if (userCache[vkId].movies !== currentState.movies) {
        events.push(`üé¨ –§–∏–ª—å–º—ã: ${currentState.movies}`);
      }
      if (userCache[vkId].quotes !== currentState.quotes) {
        events.push(`üí¨ –¶–∏—Ç–∞—Ç—ã: ${currentState.quotes}`);
      }
      if (userCache[vkId].groups !== currentState.groups) {
        const groupEvents = currentState.groups.map(group => `üîî –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ: [${group.name}](https://vk.com/club${group.id})`);
        events.push(...groupEvents);

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–ø–∏—Å–∫–µ –æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
        const oldGroups = userCache[vkId].groups.filter(group => !currentState.groups.some(g => g.id === group.id));
        oldGroups.forEach(group => {
          events.push(`üìâ –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞: [${group.name}](https://vk.com/club${group.id})`);
        });
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userCache[vkId] = currentState;

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏
    if (events.length > 0) {
      bot.sendMessage(process.env.ADMIN_CHAT_ID, `üìã –õ–æ–≥–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [${user.first_name} ${user.last_name}](https://vk.com/id${vkId}):\n${events.join("\n")}`, { parse_mode: "Markdown" });
    }

  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${vkId}: ${error.message}`);
  }
}


// üìå –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
async function periodicTracking() {
  const users = await new Promise((resolve) => {
    db.all("SELECT vk_id FROM tracked_users", [], (err, rows) => {
      if (err) resolve([]);
      resolve(rows.map((row) => row.vk_id));
    });
  });

  for (const vkId of users) {
    await startTracking(vkId);
  }
}

// üìå –∫–æ–º–∞–Ω–¥–∞ info
bot.onText(/\/info (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const vkId = match[1];  // Use vkId from the command input

  async function getVkUserId(input) {
    try {
      const vkUser = await vk.api.users.get({ user_ids: input });
      if (vkUser && vkUser.length > 0) {
        return vkUser[0].id;
      }
      return null;
    } catch (error) {
      console.error("Error fetching VK user ID:", error);
      return null;
    }
  }

  function getPlatform(platformId) {
    switch (platformId) {
      case 1:
        return '–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ';
      case 2:
        return '–ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è';
      case 3:
        return '–î–µ—Å–∫—Ç–æ–ø–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ';
      case 4:
        return '–í–µ–±-–≤–µ—Ä—Å–∏—è';
      default:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  }

  function getElapsedTime(lastSeenTime) {
    const now = Date.now() / 1000;  // Current time in seconds
    const diff = now - lastSeenTime; // Difference between current time and last seen time
  
    const minutes = Math.floor(diff / 60);
    const hours = Math.floor(diff / 3600);
    const days = Math.floor(diff / 86400);
  
    if (days > 0) {
      return `${days} –¥–Ω. –Ω–∞–∑–∞–¥`;
    } else if (hours > 0) {
      return `${hours} —á. –Ω–∞–∑–∞–¥`;
    } else if (minutes > 0) {
      return `${minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥`;
    } else {
      return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
    }
  }

  try {
    const userId = await getVkUserId(vkId);  // Pass vkId here
    if (!userId) {
      return bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—å.');
    }

    const profile = await vk.api.users.get({
      user_ids: userId,
      fields: 'photo_200, last_seen, counters, online, online_mobile, bdate, city, country, sex, status, education, home_town, followers_count'
    });

    if (!profile.length) {
      return bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.');
    }

    const user = profile[0];
    const lastSeenTime = user.last_seen ? new Date(user.last_seen.time * 1000).toLocaleString() : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const lastSeenPlatform = getPlatform(user.last_seen?.platform);
    const elapsedTime = user.last_seen ? getElapsedTime(user.last_seen.time) : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

    const profilePic = user.photo_200 || '';
    const city = user.city ? user.city.title : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    const country = user.country ? user.country.title : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    const sex = user.sex === 1 ? '–ñ–µ–Ω—Å–∫–∏–π' : user.sex === 2 ? '–ú—É–∂—Å–∫–æ–π' : '–ù–µ —É–∫–∞–∑–∞–Ω';
    const education = user.education ? `${user.education.university_name}, ${user.education.faculty_name}, ${user.education.chair_name}` : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    const homeTown = user.home_town || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    const status = user.status || '–ù–µ—Ç —Å—Ç–∞—Ç—É—Å–∞';
    const birthday = user.bdate || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
    const followers = user.counters?.followers || 0;  // Followers count
    const friends = user.counters?.friends || 0;  // Friends count

    const htmlContent = usergenerateHtml(user, profilePic, lastSeenTime, lastSeenPlatform, elapsedTime, city, country, sex, education, homeTown, status, birthday, followers, friends);
    const filePath = path.join(__dirname, `profile_${user.id}.html`);

    fs.writeFileSync(filePath, htmlContent);

    bot.sendDocument(chatId, filePath, { caption: "üîó –û—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –±—Ä–∞—É–∑–µ—Ä–µ" }).then(() => {
      fs.unlinkSync(filePath);
    });

  } catch (error) {
    console.error(error);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.');
  }
});

function usergenerateHtml(user, profilePic, lastSeenTime, lastSeenPlatform, elapsedTime, city, country, sex, education, homeTown, status, birthday, followers, friends) {
  return `
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>–ü—Ä–æ—Ñ–∏–ª—å –í–ö–æ–Ω—Ç–∞–∫—Ç–µ</title>
  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600&family=Roboto:wght@300;400;500&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <style>
    :root {
      --primary: #4F6DF5;
      --secondary: #FF5E3A;
      --text: #2D3436;
      --bg: #F5F7FA;
      --card-bg: #FFFFFF;
      --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    }
    
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Roboto', sans-serif;
      background: var(--bg);
      color: var(--text);
      line-height: 1.6;
      padding: 20px;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      background-image: 
        radial-gradient(circle at 10% 20%, rgba(79, 109, 245, 0.1) 0%, transparent 20%),
        radial-gradient(circle at 90% 80%, rgba(255, 94, 58, 0.1) 0%, transparent 20%);
    }
    
    .profile-card {
      width: 100%;
      max-width: 400px;
      background: var(--card-bg);
      border-radius: 16px;
      box-shadow: var(--shadow);
      overflow: hidden;
      transition: transform 0.3s ease, box-shadow 0.3s ease;
      margin-bottom: 30px;
    }
    
    .profile-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 15px 35px rgba(0, 0, 0, 0.15);
    }
    
    .profile-header {
      background: linear-gradient(135deg, var(--primary), var(--secondary));
      padding: 30px 20px;
      text-align: center;
      color: white;
      position: relative;
    }
    
    .avatar {
      width: 100px;
      height: 100px;
      border-radius: 50%;
      border: 4px solid white;
      object-fit: cover;
      margin-bottom: 15px;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
      transition: transform 0.3s ease;
    }
    
    .avatar:hover {
      transform: scale(1.05);
    }
    
    .profile-name {
      font-family: 'Montserrat', sans-serif;
      font-weight: 600;
      font-size: 22px;
      margin-bottom: 5px;
    }
    
    .profile-status {
      font-size: 14px;
      opacity: 0.9;
      font-weight: 300;
    }
    
    .profile-body {
      padding: 25px;
    }
    
    .info-section {
      margin-bottom: 20px;
    }
    
    .section-title {
      font-family: 'Montserrat', sans-serif;
      font-weight: 500;
      font-size: 16px;
      color: var(--primary);
      margin-bottom: 10px;
      display: flex;
      align-items: center;
    }
    
    .section-title i {
      margin-right: 8px;
      font-size: 18px;
    }
    
    .info-item {
      display: flex;
      justify-content: space-between;
      padding: 8px 0;
      border-bottom: 1px solid rgba(0, 0, 0, 0.05);
    }
    
    .info-label {
      font-weight: 500;
      color: var(--text);
      opacity: 0.7;
    }
    
    .info-value {
      font-weight: 400;
      text-align: right;
      color: var(--text);
    }
    
    .social-stats {
      display: flex;
      justify-content: space-around;
      margin-top: 20px;
      text-align: center;
    }
    
    .stat-item {
      padding: 10px;
    }
    
    .stat-number {
      font-family: 'Montserrat', sans-serif;
      font-weight: 600;
      font-size: 18px;
      color: var(--primary);
    }
    
    .stat-label {
      font-size: 12px;
      opacity: 0.7;
    }
    
    footer {
      text-align: center;
      font-size: 14px;
      color: var(--text);
      opacity: 0.7;
      margin-top: auto;
      padding: 20px 0;
    }
    
    footer a {
      color: var(--primary);
      text-decoration: none;
      font-weight: 500;
      transition: color 0.3s ease;
    }
    
    footer a:hover {
      color: var(--secondary);
    }
    
    .online-status {
      position: absolute;
      top: 15px;
      right: 15px;
      background: rgba(255, 255, 255, 0.2);
      padding: 5px 10px;
      border-radius: 20px;
      font-size: 12px;
      display: flex;
      align-items: center;
    }
    
    .online-dot {
      width: 8px;
      height: 8px;
      background: #00E676;
      border-radius: 50%;
      margin-right: 5px;
    }
    
    @media (max-width: 480px) {
      .profile-card {
        max-width: 100%;
      }
      
      .profile-header {
        padding: 25px 15px;
      }
      
      .avatar {
        width: 80px;
        height: 80px;
      }
    }
  </style>
</head>
<body>
  <div class="profile-card">
    <div class="profile-header">
      <div class="online-status">
        <span class="online-dot"></span>
        –û–Ω–ª–∞–π–Ω
      </div>
      <img src="${profilePic}" class="avatar" alt="–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è">
      <h1 class="profile-name">${user.first_name} ${user.last_name}</h1>
      <p class="profile-status">${status || '–ù–µ—Ç —Å—Ç–∞—Ç—É—Å–∞'}</p>
    </div>
    
    <div class="profile-body">
      <div class="info-section">
        <h3 class="section-title"><i class="fas fa-user-circle"></i> –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
        <div class="info-item">
          <span class="info-label">–ü–æ–ª</span>
          <span class="info-value">${sex}</span>
        </div>
        <div class="info-item">
          <span class="info-label">–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</span>
          <span class="info-value">${birthday}</span>
        </div>
        <div class="info-item">
          <span class="info-label">–ì–æ—Ä–æ–¥</span>
          <span class="info-value">${city}</span>
        </div>
        <div class="info-item">
          <span class="info-label">–°—Ç—Ä–∞–Ω–∞</span>
          <span class="info-value">${country}</span>
        </div>
        <div class="info-item">
          <span class="info-label">–†–æ–¥–Ω–æ–π –≥–æ—Ä–æ–¥</span>
          <span class="info-value">${homeTown || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
        </div>
      </div>
      
      <div class="info-section">
        <h3 class="section-title"><i class="fas fa-graduation-cap"></i> –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</h3>
        <div class="info-value" style="text-align: left; padding: 8px 0;">
          ${education || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
        </div>
      </div>
      
      <div class="info-section">
        <h3 class="section-title"><i class="fas fa-clock"></i> –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</h3>
        <div class="info-item">
          <span class="info-label">–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥</span>
          <span class="info-value">${lastSeenTime} (${elapsedTime})</span>
        </div>
        <div class="info-item">
          <span class="info-label">–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</span>
          <span class="info-value">${lastSeenPlatform}</span>
        </div>
      </div>
      
      <div class="social-stats">
        <div class="stat-item">
          <div class="stat-number">${friends}</div>
          <div class="stat-label">–î—Ä—É–∑–µ–π</div>
        </div>
        <div class="stat-item">
          <div class="stat-number">${followers}</div>
          <div class="stat-label">–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</div>
        </div>
      </div>
    </div>
  </div>
  
  <footer>
    Developer INK
  </footer>
</body>
</html>`; 
}

//üìå –∫–æ–º–∞–Ω–¥–∞ /gifo 
bot.onText(/\/ginfo (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  let groupId = match[1].trim(); // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

  // –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
  const vkUrlPattern = /(?:https?:\/\/)?(?:www\.)?vk\.com\/(club|public|event)?(\d+|[a-zA-Z0-9_.-]+)/;
  const matchResult = groupId.match(vkUrlPattern);

  if (matchResult) {
    groupId = matchResult[2] || matchResult[1];
    
    if (isNaN(groupId)) {
      try {
        const resolveResponse = await axios.get("https://api.vk.com/method/utils.resolveScreenName", {
          params: {
            screen_name: groupId,
            access_token: process.env.VK_ACCESS_TOKEN,
            v: "5.199",
          },
        });

        if (resolveResponse.data.error) {
          return bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ VK API: ${resolveResponse.data.error.error_msg}`);
        }

        const resolved = resolveResponse.data.response;
        if (!resolved || resolved.type !== "group") {
          return bot.sendMessage(chatId, "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å—Å—ã–ª–∫–∏.");
        }

        groupId = resolved.object_id;
      } catch (error) {
        return bot.sendMessage(chatId, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–º–µ–Ω–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏.");
      }
    }
  }

  try {
    const groupResponse = await axios.get("https://api.vk.com/method/groups.getById", {
      params: {
        group_id: groupId,
        fields: "photo_200,city,description,members_count,verified,cover,website",
        access_token: process.env.VK_ACCESS_TOKEN,
        v: "5.199",
      },
    });

    if (groupResponse.data.error) {
      return bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ VK API: ${groupResponse.data.error.error_msg}`);
    }

    const group = groupResponse.data.response?.groups?.[0];  // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞ groups

    if (!group) {
      return bot.sendMessage(chatId, "‚ùå –°–æ–æ–±—â–µ—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –∏–ª–∏ —Å—Å—ã–ª–∫–∏.");
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    const htmlContent = groupgenerateHtml(group);

    // –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è HTML —Ñ–∞–π–ª–∞
    const filePath = path.join(__dirname, 'group_info.html');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —Ñ–∞–π–ª
    fs.writeFileSync(filePath, htmlContent);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTML —Ñ–∞–π–ª –≤ Telegram
    bot.sendDocument(chatId, filePath, { caption: '–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ!' })
      .then(() => {
        // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        fs.unlinkSync(filePath);
      })
      .catch((error) => {
        console.error(error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.');
      });

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ:", error);
    bot.sendMessage(chatId, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –∏–ª–∏ ID.");
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
function groupgenerateHtml(group) {
  return `
  <!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ</title>
  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600&family=Roboto:wght@300;400;500&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <style>
    :root {
      --primary: #5181B8; /* VK blue */
      --secondary: #FF5E3A;
      --text: #2D3436;
      --bg: #F5F7FA;
      --card-bg: #FFFFFF;
      --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
      --verified: #4BB34B;
    }
    
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Roboto', sans-serif;
      background: var(--bg);
      color: var(--text);
      line-height: 1.6;
      padding: 20px;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      background-image: 
        radial-gradient(circle at 10% 20%, rgba(81, 129, 184, 0.1) 0%, transparent 20%),
        radial-gradient(circle at 90% 80%, rgba(255, 94, 58, 0.1) 0%, transparent 20%);
    }
    
    .group-card {
      width: 100%;
      max-width: 450px;
      background: var(--card-bg);
      border-radius: 16px;
      box-shadow: var(--shadow);
      overflow: hidden;
      transition: transform 0.3s ease, box-shadow 0.3s ease;
      margin-bottom: 30px;
    }
    
    .group-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 15px 35px rgba(0, 0, 0, 0.15);
    }
    
    .group-header {
      background: linear-gradient(135deg, var(--primary), #3a6ea5);
      padding: 30px 20px;
      text-align: center;
      color: white;
      position: relative;
    }
    
    .group-avatar {
      width: 100px;
      height: 100px;
      border-radius: 12px;
      border: 4px solid white;
      object-fit: cover;
      margin-bottom: 15px;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
      transition: transform 0.3s ease;
    }
    
    .group-avatar:hover {
      transform: scale(1.05);
    }
    
    .group-name {
      font-family: 'Montserrat', sans-serif;
      font-weight: 600;
      font-size: 22px;
      margin-bottom: 10px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .verified-badge {
      margin-left: 8px;
      color: var(--verified);
      font-size: 18px;
    }
    
    .group-body {
      padding: 25px;
    }
    
    .info-section {
      margin-bottom: 20px;
    }
    
    .section-title {
      font-family: 'Montserrat', sans-serif;
      font-weight: 500;
      font-size: 16px;
      color: var(--primary);
      margin-bottom: 10px;
      display: flex;
      align-items: center;
    }
    
    .section-title i {
      margin-right: 8px;
      font-size: 18px;
    }
    
    .info-item {
      display: flex;
      justify-content: space-between;
      padding: 10px 0;
      border-bottom: 1px solid rgba(0, 0, 0, 0.05);
    }
    
    .info-label {
      font-weight: 500;
      color: var(--text);
      opacity: 0.7;
      flex: 1;
    }
    
    .info-value {
      font-weight: 400;
      text-align: right;
      color: var(--text);
      flex: 1.5;
    }
    
    .description {
      padding: 15px;
      background: rgba(81, 129, 184, 0.05);
      border-radius: 8px;
      margin-top: 20px;
      font-size: 14px;
      line-height: 1.5;
    }
    
    .members-count {
      display: inline-block;
      background: var(--primary);
      color: white;
      padding: 8px 15px;
      border-radius: 20px;
      font-weight: 500;
      margin-top: 10px;
    }
    
    .website-link {
      color: var(--primary);
      text-decoration: none;
      transition: color 0.3s ease;
      word-break: break-all;
    }
    
    .website-link:hover {
      color: var(--secondary);
      text-decoration: underline;
    }
    
    footer {
      text-align: center;
      font-size: 14px;
      color: var(--text);
      opacity: 0.7;
      margin-top: auto;
      padding: 20px 0;
    }
    
    footer a {
      color: var(--primary);
      text-decoration: none;
      font-weight: 500;
      transition: color 0.3s ease;
    }
    
    footer a:hover {
      color: var(--secondary);
    }
    
    @media (max-width: 480px) {
      .group-card {
        max-width: 100%;
      }
      
      .group-header {
        padding: 25px 15px;
      }
      
      .group-avatar {
        width: 80px;
        height: 80px;
      }
      
      .group-name {
        font-size: 20px;
      }
    }
  </style>
</head>
<body>
  <div class="group-card">
    <div class="group-header">
      <img src="${group.photo_200}" class="group-avatar" alt="–§–æ—Ç–æ –≥—Ä—É–ø–ø—ã">
      <h1 class="group-name">
        ${group.name}
        ${group.verified ? '<span class="verified-badge"><i class="fas fa-check-circle"></i></span>' : ''}
      </h1>
    </div>
    
    <div class="group-body">
      <div class="info-section">
        <h3 class="section-title"><i class="fas fa-info-circle"></i> –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
        <div class="info-item">
          <span class="info-label">–ì–æ—Ä–æ–¥</span>
          <span class="info-value">${group.city?.title || "–ù–µ —É–∫–∞–∑–∞–Ω"}</span>
        </div>
        <div class="info-item">
          <span class="info-label">–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è</span>
          <span class="info-value">
            ${group.verified ? '<span style="color: var(--verified);"><i class="fas fa-check"></i> –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞</span>' : '<span style="color: #FF4757;"><i class="fas fa-times"></i> –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞</span>'}
          </span>
        </div>
      </div>
      
      <div class="info-section">
        <h3 class="section-title"><i class="fas fa-users"></i> –£—á–∞—Å—Ç–Ω–∏–∫–∏</h3>
        <div style="text-align: center;">
          <span class="members-count">
            <i class="fas fa-user-friends"></i> ${group.members_count || "0"} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
          </span>
        </div>
      </div>
      
      ${group.description ? `
      <div class="info-section">
        <h3 class="section-title"><i class="fas fa-align-left"></i> –û–ø–∏—Å–∞–Ω–∏–µ</h3>
        <div class="description">
          ${group.description}
        </div>
      </div>
      ` : ''}
      
      ${group.website ? `
      <div class="info-section">
        <h3 class="section-title"><i class="fas fa-globe"></i> –í–µ–±—Å–∞–π—Ç</h3>
        <div style="text-align: center; margin-top: 10px;">
          <a href="${group.website.startsWith('http') ? group.website : 'https://' + group.website}" 
             class="website-link" 
             target="_blank">
            <i class="fas fa-external-link-alt"></i> ${group.website}
          </a>
        </div>
      </div>
      ` : ''}
    </div>
  </div>
  
  <footer>
    Developer INK
  </footer>
</body>
</html>`;
}

//üìå –∫–æ–º–∞–Ω–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∏ 
function usergroupgenerateHtml(members) {
  const membersHtml = members.map(member => `
    <div class="friend">
      <img src="${member.photo_100}" class="avatar" alt="–§–æ—Ç–æ">
      <div class="friend-info">${member.first_name} ${member.last_name}</div>
    </div>
  `).join('');

  return `<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã</title>
  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600&family=Roboto:wght@300;400;500&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <style>
    :root {
      --primary: #5181B8;
      --secondary: #FF5E3A;
      --text: #2D3436;
      --bg: #F5F7FA;
      --card-bg: #FFFFFF;
      --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
      --online: #4BB34B;
      --offline: #99A2AD;
    }
    
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Roboto', sans-serif;
      background: var(--bg);
      color: var(--text);
      line-height: 1.6;
      padding: 20px;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      align-items: center;
      background-image: 
        radial-gradient(circle at 10% 20%, rgba(81, 129, 184, 0.1) 0%, transparent 20%),
        radial-gradient(circle at 90% 80%, rgba(255, 94, 58, 0.1) 0%, transparent 20%);
    }
    
    .members-container {
      width: 100%;
      max-width: 500px;
      background: var(--card-bg);
      border-radius: 16px;
      box-shadow: var(--shadow);
      overflow: hidden;
      margin-bottom: 30px;
    }
    
    .members-header {
      background: linear-gradient(135deg, var(--primary), #3a6ea5);
      padding: 20px;
      text-align: center;
      color: white;
    }
    
    .members-title {
      font-family: 'Montserrat', sans-serif;
      font-weight: 600;
      font-size: 22px;
      margin: 0;
    }
    
    .members-list {
      padding: 15px 20px;
      max-height: 500px;
      overflow-y: auto;
    }
    
    .member-card {
      display: flex;
      align-items: center;
      padding: 10px;
      margin-bottom: 10px;
      background: rgba(81, 129, 184, 0.05);
      border-radius: 10px;
      transition: all 0.3s ease;
    }
    
    .member-card:hover {
      background: rgba(81, 129, 184, 0.1);
      transform: translateX(5px);
    }
    
    .member-avatar {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      object-fit: cover;
      margin-right: 15px;
      border: 2px solid #e1e3e6;
    }
    
    .member-name {
      font-family: 'Montserrat', sans-serif;
      font-weight: 500;
      font-size: 16px;
      color: var(--text);
    }
    
    footer {
      text-align: center;
      font-size: 14px;
      color: var(--text);
      opacity: 0.7;
      margin-top: auto;
      padding: 20px 0;
    }
    
    footer a {
      color: var(--primary);
      text-decoration: none;
      font-weight: 500;
    }
    
    .empty-state {
      text-align: center;
      padding: 30px;
      color: #656565;
    }
    
    .empty-state i {
      font-size: 40px;
      margin-bottom: 15px;
      color: #d3d3d3;
    }
    
    @media (max-width: 480px) {
      .members-container {
        max-width: 100%;
      }
      
      .member-avatar {
        width: 40px;
        height: 40px;
        margin-right: 10px;
      }
      
      .member-name {
        font-size: 14px;
      }
    }
  </style>
</head>
<body>
  <div class="members-container">
    <div class="members-header">
      <h1 class="members-title">–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã</h1>
    </div>
    
    <div class="members-list">
      ${membersHtml || `
        <div class="empty-state">
          <i class="fas fa-user-slash"></i>
          <p>–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
        </div>
      `}
    </div>
  </div>
  
  <footer>
    Developer INK
  </footer>
</body>
</html>`;
}

// –ö–æ–º–∞–Ω–¥–∞ /—É—á–∞—Å—Ç–Ω–∏–∫–∏
bot.onText(/\/—É—á–∞—Å—Ç–Ω–∏–∫–∏ (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  let groupId = match[1];

  // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞, –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –≥—Ä—É–ø–ø—ã
  if (groupId.includes("vk.com/")) {
    groupId = groupId.split("/").pop();
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
    const response = await axios.get("https://api.vk.com/method/groups.getMembers", {
      params: {
        group_id: groupId,
        fields: "first_name,last_name,photo_100",
        access_token: process.env.VK_ACCESS_TOKEN,
        v: "5.131"
      }
    });

    if (response.data.error) {
      bot.sendMessage(chatId, `–û—à–∏–±–∫–∞: ${response.data.error.error_msg}`);
      return;
    }

    const members = response.data.response.items;

    if (!members.length) {
      bot.sendMessage(chatId, "–í –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –æ–Ω–∞ —Å–∫—Ä—ã—Ç–∞.");
      return;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML
    const htmlContent = usergroupgenerateHtml(members);
    const filePath = `members_${groupId}.html`;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    fs.writeFileSync(filePath, htmlContent, "utf8");

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.sendDocument(chatId, filePath, { caption: "–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã" })
      .then(() => fs.unlinkSync(filePath))  // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
      .catch(err => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:", err));

  } catch (error) {
    console.error(error);
    bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.");
  }
});

//üìå –∫–æ–º–∞–Ω–¥–∞ /–¥—Ä—É–∑—å—è 
bot.onText(/\/–¥—Ä—É–∑—å—è (\d+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const vkId = match[1];  // –ò–∑–≤–ª–µ–∫–∞–µ–º vkId –∏–∑ –∫–æ–º–∞–Ω–¥—ã

  async function getVkUserId(input) {
    try {
      const vkUser = await vk.api.users.get({ user_ids: input });
      if (vkUser && vkUser.length > 0) {
        return vkUser[0].id;  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      }
      return null;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      return null;
    }
  }

  // –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
  const userId = await getVkUserId(vkId);
  if (!userId) {
    return bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫—Ä—ã—Ç.');
  }

  try {
    // –ó–∞–ø—Ä–æ—Å –∫ API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π
    const response = await vk.api.friends.get({
      user_id: userId,
      order: 'name',
      fields: 'first_name,last_name,photo_100',
    });

    const friends = response.items || [];
    if (friends.length === 0) {
      return bot.sendMessage(chatId, '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥—Ä—É–∑–µ–π –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫—Ä—ã—Ç.');
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π
    let friendsHtml = '';
    friends.forEach(friend => {
      friendsHtml += `<div class="friend">
          <img src="${friend.photo_100}" class="avatar" alt="–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è">
          <p>${friend.first_name} ${friend.last_name}</p>
      </div>`;
    });

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ HTML-–¥–æ–∫—É–º–µ–Ω—Ç–∞
    const htmlContent = `<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>–°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –í–ö–æ–Ω—Ç–∞–∫—Ç–µ</title>
  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600&family=Roboto:wght@300;400;500&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <style>
    :root {
      --primary: #5181B8;
      --secondary: #FF5E3A;
      --text: #2D3436;
      --bg: #F5F7FA;
      --card-bg: #FFFFFF;
      --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
      --online: #4BB34B;
      --offline: #99A2AD;
    }
    
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Roboto', sans-serif;
      background: var(--bg);
      color: var(--text);
      line-height: 1.6;
      padding: 20px;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      align-items: center;
      background-image: 
        radial-gradient(circle at 10% 20%, rgba(81, 129, 184, 0.1) 0%, transparent 20%),
        radial-gradient(circle at 90% 80%, rgba(255, 94, 58, 0.1) 0%, transparent 20%);
    }
    
    .friends-container {
      width: 100%;
      max-width: 500px;
      background: var(--card-bg);
      border-radius: 16px;
      box-shadow: var(--shadow);
      overflow: hidden;
      margin-bottom: 30px;
    }
    
    .friends-header {
      background: linear-gradient(135deg, var(--primary), #3a6ea5);
      padding: 20px;
      text-align: center;
      color: white;
    }
    
    .friends-title {
      font-family: 'Montserrat', sans-serif;
      font-weight: 600;
      font-size: 22px;
      margin: 0;
    }
    
    .friends-list {
      padding: 15px 20px;
      max-height: 500px;
      overflow-y: auto;
    }
    
    .friend-card {
      display: flex;
      align-items: center;
      padding: 12px 15px;
      margin-bottom: 10px;
      background: rgba(81, 129, 184, 0.05);
      border-radius: 10px;
      transition: all 0.3s ease;
    }
    
    .friend-card:hover {
      background: rgba(81, 129, 184, 0.1);
    }
    
    .friend-avatar {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      object-fit: cover;
      margin-right: 15px;
      border: 2px solid #e1e3e6;
    }
    
    .friend-info {
      flex: 1;
    }
    
    .friend-name {
      font-family: 'Montserrat', sans-serif;
      font-weight: 500;
      font-size: 16px;
      color: var(--text);
    }
    
    footer {
      text-align: center;
      font-size: 14px;
      color: var(--text);
      opacity: 0.7;
      margin-top: auto;
      padding: 20px 0;
    }
    
    footer a {
      color: var(--primary);
      text-decoration: none;
      font-weight: 500;
    }
    
    .empty-state {
      text-align: center;
      padding: 30px;
      color: #656565;
    }
    
    .empty-state i {
      font-size: 40px;
      margin-bottom: 15px;
      color: #d3d3d3;
    }
    
    @media (max-width: 480px) {
      .friends-container {
        max-width: 100%;
      }
      
      .friend-avatar {
        width: 40px;
        height: 40px;
        margin-right: 10px;
      }
    }
  </style>
</head>
<body>
  <div class="friends-container">
    <div class="friends-header">
      <h1 class="friends-title">–î—Ä—É–∑—å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h1>
    </div>
    
    <div class="friends-list">
      ${friendsHtml || `
        <div class="empty-state">
          <i class="fas fa-user-slash"></i>
          <p>–ù–µ—Ç –¥—Ä—É–∑–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
        </div>
      `}
    </div>
  </div>
  
  <footer>
    Developer INK
  </footer>
</body>
</html>`;

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ HTML –≤ —Ñ–∞–π–ª
    const filePath = `friends_${userId}.html`;
    fs.writeFileSync(filePath, htmlContent);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ Telegram
    await bot.sendDocument(chatId, filePath, { caption: '–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π:' });

    // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    fs.unlinkSync(filePath);
  } catch (error) {
    console.error(error);
    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ ID —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ.');
  }
});

//üìå –∫–æ–º–∞–Ω–¥–∞ /–ø–æ–¥–ø–∏—Å—á–∏–∫–∏ 
bot.onText(/\/–ø–æ–¥–ø–∏—Å—á–∏–∫–∏ (\d+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const vkId = match[1];  // –ò–∑–≤–ª–µ–∫–∞–µ–º vkId –∏–∑ –∫–æ–º–∞–Ω–¥—ã

  async function getVkUserId(input) {
    try {
      const vkUser = await vk.api.users.get({ user_ids: input });
      if (vkUser && vkUser.length > 0) {
        return vkUser[0].id;  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      }
      return null;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      return null;
    }
  }

  // –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
  const userId = await getVkUserId(vkId);
  if (!userId) {
    return bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫—Ä—ã—Ç.');
  }

  try {
    // –ó–∞–ø—Ä–æ—Å –∫ API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const response = await vk.api.users.getFollowers({
      user_id: userId,
      count: 100,  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ 100
      fields: 'first_name,last_name,photo_100',  // –ü–æ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
    });

    const followers = response.items || [];
    if (followers.length === 0) {
      return bot.sendMessage(chatId, '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫—Ä—ã—Ç.');
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    let followersHtml = '';
    followers.forEach(follower => {
      followersHtml += `<div class="follower">
          <img src="${follower.photo_100}" class="avatar" alt="–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è">
          <p>${follower.first_name} ${follower.last_name}</p>
      </div>`;
    });

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ HTML-–¥–æ–∫—É–º–µ–Ω—Ç–∞
    const htmlContent = `<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ</title>
  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600&family=Roboto:wght@300;400;500&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <style>
    :root {
      --primary: #5181B8;
      --secondary: #FF5E3A;
      --text: #2D3436;
      --bg: #F5F7FA;
      --card-bg: #FFFFFF;
      --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
      --online: #4BB34B;
      --offline: #99A2AD;
    }
    
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Roboto', sans-serif;
      background: var(--bg);
      color: var(--text);
      line-height: 1.6;
      padding: 20px;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      align-items: center;
      background-image: 
        radial-gradient(circle at 10% 20%, rgba(81, 129, 184, 0.1) 0%, transparent 20%),
        radial-gradient(circle at 90% 80%, rgba(255, 94, 58, 0.1) 0%, transparent 20%);
    }
    
    .followers-container {
      width: 100%;
      max-width: 500px;
      background: var(--card-bg);
      border-radius: 16px;
      box-shadow: var(--shadow);
      overflow: hidden;
      margin-bottom: 30px;
    }
    
    .followers-header {
      background: linear-gradient(135deg, var(--primary), #3a6ea5);
      padding: 20px;
      text-align: center;
      color: white;
    }
    
    .followers-title {
      font-family: 'Montserrat', sans-serif;
      font-weight: 600;
      font-size: 22px;
      margin: 0;
    }
    
    .followers-list {
      padding: 15px 20px;
      max-height: 500px;
      overflow-y: auto;
    }
    
    .follower-card {
      display: flex;
      align-items: center;
      padding: 12px 15px;
      margin-bottom: 10px;
      background: rgba(81, 129, 184, 0.05);
      border-radius: 10px;
      transition: all 0.3s ease;
    }
    
    .follower-card:hover {
      background: rgba(81, 129, 184, 0.1);
      transform: translateX(5px);
    }
    
    .follower-avatar {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      object-fit: cover;
      margin-right: 15px;
      border: 2px solid #e1e3e6;
    }
    
    .follower-info {
      flex: 1;
    }
    
    .follower-name {
      font-family: 'Montserrat', sans-serif;
      font-weight: 500;
      font-size: 16px;
      color: var(--text);
    }
    
    footer {
      text-align: center;
      font-size: 14px;
      color: var(--text);
      opacity: 0.7;
      margin-top: auto;
      padding: 20px 0;
    }
    
    footer a {
      color: var(--primary);
      text-decoration: none;
      font-weight: 500;
    }
    
    .empty-state {
      text-align: center;
      padding: 30px;
      color: #656565;
    }
    
    .empty-state i {
      font-size: 40px;
      margin-bottom: 15px;
      color: #d3d3d3;
    }
    
    @media (max-width: 480px) {
      .followers-container {
        max-width: 100%;
      }
      
      .follower-avatar {
        width: 40px;
        height: 40px;
        margin-right: 10px;
      }
    }
  </style>
</head>
<body>
  <div class="followers-container">
    <div class="followers-header">
      <h1 class="followers-title">–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h1>
    </div>
    
    <div class="followers-list">
      ${followersHtml || `
        <div class="empty-state">
          <i class="fas fa-user-slash"></i>
          <p>–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
        </div>
      `}
    </div>
  </div>
  
  <footer>
    Developer INK
  </footer>
</body>
</html>`;

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ HTML –≤ —Ñ–∞–π–ª
    const filePath = `followers_${userId}.html`;
    fs.writeFileSync(filePath, htmlContent);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ Telegram
    await bot.sendDocument(chatId, filePath, { caption: '–í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:' });

    // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    fs.unlinkSync(filePath);
  } catch (error) {
    console.error(error);
    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ ID —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ.');
  }
});

//üìå –∫–æ–º–∞–Ω–¥–∞ /–ø–æ–¥–ø–∏—Å–∫–∏ 
bot.onText(/\/–ø–æ–¥–ø–∏—Å–∫–∏ (\d+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const vkId = match[1];  // –ò–∑–≤–ª–µ–∫–∞–µ–º vkId –∏–∑ –∫–æ–º–∞–Ω–¥—ã

  async function getVkUserId(input) {
    try {
      const vkUser = await vk.api.users.get({ user_ids: input });
      if (vkUser && vkUser.length > 0) {
        return vkUser[0].id;  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      }
      return null;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      return null;
    }
  }

  // –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
  const userId = await getVkUserId(vkId);
  if (!userId) {
    return bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫—Ä—ã—Ç.');
  }

  try {
    // –ó–∞–ø—Ä–æ—Å –∫ API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
    const response = await vk.api.users.getSubscriptions({
      user_id: userId,
      extended: 1,  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
      fields: 'name,photo_100',  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ
    });

    const subscriptions = response.items || [];
    if (subscriptions.length === 0) {
      return bot.sendMessage(chatId, '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫—Ä—ã—Ç.');
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
    let subscriptionsHtml = '';
    subscriptions.forEach(subscriber => {
      subscriptionsHtml += `<div class="subscription">
          <img src="${subscriber.photo_100}" class="avatar" alt="–§–æ—Ç–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞">
          <p>${subscriber.name}</p>
      </div>`;
    });

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ HTML-–¥–æ–∫—É–º–µ–Ω—Ç–∞
    const htmlContent = `<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>–ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ</title>
  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600&family=Roboto:wght@300;400;500&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <style>
    :root {
      --primary: #5181B8; /* –û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç VK */
      --secondary: #FF5E3A;
      --text: #2D3436;
      --bg: #F5F7FA;
      --card-bg: #FFFFFF;
      --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
      --verified: #4BB34B;
    }
    
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Roboto', sans-serif;
      background: var(--bg);
      color: var(--text);
      line-height: 1.6;
      padding: 20px;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      align-items: center;
      background-image: 
        radial-gradient(circle at 10% 20%, rgba(81, 129, 184, 0.1) 0%, transparent 20%),
        radial-gradient(circle at 90% 80%, rgba(255, 94, 58, 0.1) 0%, transparent 20%);
    }
    
    .subscriptions-container {
      width: 100%;
      max-width: 500px;
      background: var(--card-bg);
      border-radius: 16px;
      box-shadow: var(--shadow);
      overflow: hidden;
      margin-bottom: 30px;
    }
    
    .subscriptions-header {
      background: linear-gradient(135deg, var(--primary), #3a6ea5);
      padding: 20px;
      text-align: center;
      color: white;
    }
    
    .subscriptions-title {
      font-family: 'Montserrat', sans-serif;
      font-weight: 600;
      font-size: 22px;
      margin: 0;
    }
    
    .subscriptions-list {
      padding: 15px 20px;
      max-height: 500px;
      overflow-y: auto;
    }
    
    .subscription-card {
      display: flex;
      align-items: center;
      padding: 12px 15px;
      margin-bottom: 10px;
      background: rgba(81, 129, 184, 0.05);
      border-radius: 10px;
      transition: all 0.3s ease;
    }
    
    .subscription-card:hover {
      background: rgba(81, 129, 184, 0.1);
      transform: translateX(5px);
    }
    
    .subscription-avatar {
      width: 50px;
      height: 50px;
      border-radius: 12px; /* –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –¥–ª—è –≥—Ä—É–ø–ø */
      object-fit: cover;
      margin-right: 15px;
      border: 2px solid #e1e3e6;
    }
    
    .subscription-info {
      flex: 1;
    }
    
    .subscription-name {
      font-family: 'Montserrat', sans-serif;
      font-weight: 500;
      font-size: 16px;
      margin-bottom: 3px;
      display: flex;
      align-items: center;
    }
    
    .verified-badge {
      margin-left: 5px;
      color: var(--verified);
      font-size: 14px;
    }
    
    .subscription-type {
      font-size: 13px;
      color: #656565;
    }
    
    footer {
      text-align: center;
      font-size: 14px;
      color: var(--text);
      opacity: 0.7;
      margin-top: auto;
      padding: 20px 0;
    }
    
    footer a {
      color: var(--primary);
      text-decoration: none;
      font-weight: 500;
      transition: color 0.3s ease;
    }
    
    footer a:hover {
      color: var(--secondary);
    }
    
    .empty-state {
      text-align: center;
      padding: 30px;
      color: #656565;
    }
    
    .empty-state i {
      font-size: 40px;
      margin-bottom: 15px;
      color: #d3d3d3;
    }
    
    @media (max-width: 480px) {
      .subscriptions-container {
        max-width: 100%;
      }
      
      .subscription-avatar {
        width: 40px;
        height: 40px;
        margin-right: 10px;
      }
    }
  </style>
</head>
<body>
  <div class="subscriptions-container">
    <div class="subscriptions-header">
      <h1 class="subscriptions-title">–ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h1>
    </div>
    
    <div class="subscriptions-list">
      ${subscriptionsHtml || `
        <div class="empty-state">
          <i class="fas fa-bell-slash"></i>
          <p>–ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
        </div>
      `}
    </div>
  </div>
  
  <footer>
    Developer INK
  </footer>
</body>
</html>`;

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ HTML –≤ —Ñ–∞–π–ª
    const filePath = `subscriptions_${userId}.html`;
    fs.writeFileSync(filePath, htmlContent);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ Telegram
    await bot.sendDocument(chatId, filePath, { caption: '–í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:' });

    // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    fs.unlinkSync(filePath);
  } catch (error) {
    console.error(error);
    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ ID —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ.');
  }
});

//üìå –∫–æ–º–∞–Ω–¥–∞ photo
// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç—ã
try {
  registerFont('C:\\Windows\\Fonts\\arial.ttf', { family: 'Arial' });
  registerFont('C:\\Windows\\Fonts\\arialbd.ttf', { family: 'Arial', weight: 'bold' });
} catch (err) {
  console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —à—Ä–∏—Ñ—Ç—ã, –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ');
}

bot.onText(/\/photo (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const vkId = match[1];

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  const getElapsedTime = (lastSeenTime) => {
    if (!lastSeenTime) return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    const now = Math.floor(Date.now() / 1000);
    const diff = now - lastSeenTime;
    const intervals = [
      { label: '–≥–æ–¥', seconds: 31536000 },
      { label: '–º–µ—Å', seconds: 2592000 },
      { label: '–¥–Ω', seconds: 86400 },
      { label: '—á', seconds: 3600 },
      { label: '–º–∏–Ω', seconds: 60 }
    ];
    for (const interval of intervals) {
      const count = Math.floor(diff / interval.seconds);
      if (count >= 1) return `${count} ${interval.label}. –Ω–∞–∑–∞–¥`;
    }
    return "–¢–æ–ª—å–∫–æ —á—Ç–æ";
  };

  const getPlatformName = (platformId) => {
    const platforms = {
      1: "–ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è", 2: "iPhone", 3: "iPad", 
      4: "Android", 5: "Windows Phone", 6: "–ü–ö", 
      7: "VK Mobile", 8: "VK –¥–ª—è Windows"
    };
    return platforms[platformId] || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
  };

  try {
    const [user] = await vk.api.users.get({
      user_ids: vkId,
      fields: 'photo_max_orig,last_seen,counters,city,verified,status,site,sex,' +
              'relation,bdate,has_mobile,is_closed,wall_comments,blacklisted'
    });

    if (!user) {
      return bot.sendMessage(chatId, "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    const avatarUrl = user.photo_max_orig;
    const lastSeenTime = user.last_seen ? getElapsedTime(user.last_seen.time) : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    const friendsCount = user.counters?.friends || 0;
    const followersCount = user.counters?.followers || 0;
    const city = user.city ? user.city.title : "–ù–µ —É–∫–∞–∑–∞–Ω";
    const verified = user.verified ? "‚úÖ –î–∞" : "‚ùå –ù–µ—Ç";
    const online = user.online ? "üü¢ –û–Ω–ª–∞–π–Ω" : "üî¥ –û—Ñ—Ñ–ª–∞–π–Ω";
    const device = user.last_seen ? getPlatformName(user.last_seen.platform) : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    const status = user.status || "–ù–µ —É–∫–∞–∑–∞–Ω";
    const sex = user.sex === 1 ? "üë© –ñ–µ–Ω—Å–∫–∏–π" : user.sex === 2 ? "üë® –ú—É–∂—Å–∫–æ–π" : "–ù–µ —É–∫–∞–∑–∞–Ω";
    const bdate = user.bdate || "–ù–µ —É–∫–∞–∑–∞–Ω–∞";
    const hasMobile = user.has_mobile ? "‚úÖ –î–∞" : "‚ùå –ù–µ—Ç";
    const isClosed = user.is_closed ? "üîí –ó–∞–∫—Ä—ã—Ç—ã–π" : "üîì –û—Ç–∫—Ä—ã—Ç—ã–π";
    const wallComments = user.wall_comments ? "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω—ã" : "‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω—ã";
    const blacklisted = user.blacklisted ? "‚úÖ –í –ß–°" : "‚ùå –ù–µ—Ç";
    const site = user.site || "–ù–µ —É–∫–∞–∑–∞–Ω";
    const relation = user.relation || "–ù–µ —É–∫–∞–∑–∞–Ω—ã";
    const photosCount = user.counters?.photos || 0;
    const videosCount = user.counters?.videos || 0;
    const giftsCount = user.counters?.gifts || 0;
    const wallPostsCount = user.counters?.posts || 0;

    // –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const canvasWidth = 1000;
    const canvasHeight = 1500;
    const canvas = createCanvas(canvasWidth, canvasHeight);
    const ctx = canvas.getContext('2d');

    // –§–æ–Ω
    const gradient = ctx.createLinearGradient(0, 0, canvasWidth, canvasHeight);
    gradient.addColorStop(0, '#1e3c72');
    gradient.addColorStop(1, '#2a5298');
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, canvasWidth, canvasHeight);

    // –ê–≤–∞—Ç–∞—Ä
    try {
      const avatar = await loadImage(avatarUrl);
      ctx.save();
      ctx.beginPath();
      ctx.arc(150, 150, 120, 0, Math.PI * 2);
      ctx.closePath();
      ctx.clip();
      ctx.drawImage(avatar, 30, 30, 240, 240);
      ctx.restore();
      
      // –†–∞–º–∫–∞
      ctx.beginPath();
      ctx.arc(150, 150, 120, 0, Math.PI * 2);
      ctx.lineWidth = 5;
      ctx.strokeStyle = '#ffffff';
      ctx.stroke();
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏:', e);
      ctx.fillStyle = '#ffffff';
      ctx.beginPath();
      ctx.arc(150, 150, 120, 0, Math.PI * 2);
      ctx.fill();
    }

    // –¢–µ–∫—Å—Ç
    ctx.fillStyle = '#ffffff';
    ctx.font = 'bold 42px Arial';
    ctx.fillText(`${user.first_name} ${user.last_name}`, 350, 150);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    let yPos = 220;
    const addTextLine = (label, value, icon = '') => {
      ctx.font = 'bold 28px Arial';
      ctx.fillText(`${icon} ${label}:`, 350, yPos);
      ctx.font = '28px Arial';
      ctx.fillText(value, 650, yPos);
      yPos += 40;
    };

    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    addTextLine('–ì–æ—Ä–æ–¥', city, 'üèô');
    addTextLine('–°—Ç–∞—Ç—É—Å', status, 'üè∑');
    addTextLine('–û–Ω–ª–∞–π–Ω', online, 'üîµ');
    addTextLine('–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥', lastSeenTime, '‚è±');
    addTextLine('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', device, 'üì±');
    addTextLine('–ü–æ–ª', sex, 'üë§');
    addTextLine('–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è', bdate, 'üéÇ');
    addTextLine('–¢–µ–ª–µ—Ñ–æ–Ω', hasMobile, 'üìû');
    addTextLine('–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è', verified, '‚úÖ');
    addTextLine('–ü—Ä–æ—Ñ–∏–ª—å', isClosed, 'üîê');
    addTextLine('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', wallComments, 'üí¨');
    addTextLine('–í –ß–°', blacklisted, 'üö´');
    addTextLine('–°–∞–π—Ç', site, 'üåê');
    addTextLine('–û—Ç–Ω–æ—à–µ–Ω–∏—è', relation, 'üíë');

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    yPos += 20;
    ctx.font = 'bold 32px Arial';
    ctx.fillText('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', 350, yPos);
    yPos += 40;

    addTextLine('–î—Ä—É–∑—å—è', friendsCount, 'üë´');
    addTextLine('–ü–æ–¥–ø–∏—Å—á–∏–∫–∏', followersCount, 'üë•');
    addTextLine('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏', photosCount, 'üì∏');
    addTextLine('–í–∏–¥–µ–æ', videosCount, 'üé•');
    addTextLine('–ü–æ–¥–∞—Ä–∫–∏', giftsCount, 'üéÅ');
    addTextLine('–ó–∞–ø–∏—Å–∏', wallPostsCount, 'üìù');

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å "Developer by INK" –≤–Ω–∏–∑—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   ctx.fillStyle = 'rgba(255, 255, 255, 0.7)'; // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –±–µ–ª—ã–π
   ctx.font = 'italic 24px Arial';
   const signatureText = 'Developer by INK';
   const textWidth = ctx.measureText(signatureText).width;
   ctx.fillText(signatureText, canvasWidth - textWidth - 40, canvasHeight - 30);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const tempFile = path.join(os.tmpdir(), `vk_profile_${Date.now()}.png`);
    const out = fs.createWriteStream(tempFile);
    const stream = canvas.createPNGStream();

    await new Promise((resolve, reject) => {
      stream.pipe(out);
      out.on('finish', resolve);
      out.on('error', reject);
    });

    await bot.sendPhoto(chatId, tempFile, {
      caption: `üìã –ü—Ä–æ—Ñ–∏–ª—å ${user.first_name} ${user.last_name}`,
      parse_mode: 'Markdown'
    });

    fs.unlink(tempFile, () => {});

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è');
  }
});

//üìå –∫–æ–º–∞–Ω–¥–∞ settings
let isLoggingEnabled = false;  // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –ª–æ–≥–æ–≤

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–º –æ–∫–Ω–µ
async function sendDeveloperInfo(chatId) {
  const developerInfo = 
    `üõ† –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:
    –≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª –Ω–∞–ø–∏—Å–∞–Ω –¥–ª—è –ª–∏—á–Ω—ã—Ö —Ü–µ–ª–µ–π. –°–æ–∑–¥–∞—Ç–µ–ª—å –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –∑–∞–ø—Ä–µ—Ç–∞ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —à–ø–∏–æ–Ω—Å–∫–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º!

    –ï—Å–ª–∏ –≤—ã –≤–Ω–æ—Å–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥ –±–æ—Ç–∞ –∏ –≥–æ—Ç–æ–≤–∏—Ç–µ—Å—å –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, —É–∫–∞–∂–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞: INK.
    `;
  
  bot.sendMessage(chatId, developerInfo);  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API
  
  if (isLoggingEnabled) console.log(`–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
async function getVkUserInfo() {
  try {
    const response = await vk.api.users.get({ access_token: process.env.VK_ACCESS_TOKEN });
    if (isLoggingEnabled) console.log('–ó–∞–ø—Ä–æ—Å –∫ VK API: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ');
    return response[0]; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  } catch (error) {
    if (isLoggingEnabled) console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ:', error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
async function checkVkToken() {
  try {
    const response = await axios.get('https://api.vk.com/method/users.get', {
      params: {
        access_token: process.env.VK_ACCESS_TOKEN,  // –¢–æ–∫–µ–Ω –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
        v: '5.131',  // –í–µ—Ä—Å–∏—è API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
      },
    });

    if (response.data && response.data.response && response.data.response.length > 0) {
      if (isLoggingEnabled) console.log('–¢–æ–∫–µ–Ω –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
      return true;  // –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
    } else {
      if (isLoggingEnabled) console.log('–¢–æ–∫–µ–Ω –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
      return false;  // –¢–æ–∫–µ–Ω –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
    }
  } catch (error) {
    if (isLoggingEnabled) console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞:', error);
    return false;  // –¢–æ–∫–µ–Ω –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏ –ø–∞–º—è—Ç—å
async function getSystemLoad() {
  const cpuUsage = await new Promise((resolve) => osu.cpuUsage(resolve));
  const memoryUsage = osu.freememPercentage() * 100; // –°–≤–æ–±–æ–¥–Ω–∞—è –ø–∞–º—è—Ç—å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
  return {
    cpu: cpuUsage.toFixed(2),
    memory: (100 - memoryUsage).toFixed(2) // –ó–∞–Ω—è—Ç–∞—è –ø–∞–º—è—Ç—å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
  };
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∏–Ω–≥–µ –±–æ—Ç–∞
async function getBotPing() {
  const startTime = Date.now();
  await bot.getMe();  // –ü–∏–Ω–≥ –±–æ—Ç–∞
  const ping = Date.now() - startTime;
  return ping;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
function getSystemInfo() {
  const platform = os.platform();  // –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'linux', 'win32', 'darwin')
  const arch = os.arch();  // –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'x64')
  const osType = os.type();  // –¢–∏–ø –û–° (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Linux', 'Darwin', 'Windows_NT')
  const osRelease = os.release();  // –í–µ—Ä—Å–∏—è –û–°
  const hostname = os.hostname();  // –ò–º—è —Ö–æ—Å—Ç–∞
  const uptime = os.uptime();  // –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

  return {
    platform,
    arch,
    osType,
    osRelease,
    hostname,
    uptime: moment.duration(uptime, 'seconds').humanize(),  // –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
  };
}
// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /settings
bot.onText(/\/settings/, async (msg) => {
  const chatId = msg.chat.id;

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /settings
  if (isLoggingEnabled) console.log(`–ö–æ–º–∞–Ω–¥–∞ /settings –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${chatId}`);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
  if (!allowedAdmins.includes(chatId)) {
    return bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
  }

  const uptime = moment.duration(process.uptime(), 'seconds').humanize();  // –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
  const startTime = moment().format('DD-MM-YYYY HH:mm:ss');  // –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
  const vkUserInfo = await getVkUserInfo();
  const vkTokenValid = await checkVkToken() ? "‚úÖ –¢–æ–∫–µ–Ω –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω" : "‚ùå –¢–æ–∫–µ–Ω –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω";
  const systemLoad = await getSystemLoad();  // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —Å–∏—Å—Ç–µ–º—É
  const botPing = await getBotPing();  // –ü–æ–ª—É—á–∞–µ–º –ø–∏–Ω–≥ –±–æ—Ç–∞
  const systemInfo = getSystemInfo();  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –û–°

  const settingsMessage = `
    üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:
    - –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${uptime}
    - –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${startTime}
    - –í–ª–∞–¥–µ–ª–µ—Ü —Ç–æ–∫–µ–Ω–∞ (–í–ö–æ–Ω—Ç–∞–∫—Ç–µ): ${vkUserInfo ? vkUserInfo.first_name + " " + vkUserInfo.last_name : "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"}
    - –°—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: ${vkTokenValid}
    - –ù–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä: ${systemLoad.cpu}%
    - –ù–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –ø–∞–º—è—Ç—å: ${systemLoad.memory}%
    - –ü–∏–Ω–≥ –±–æ—Ç–∞: ${botPing}ms
    - –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:
      - –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${systemInfo.platform}
      - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: ${systemInfo.arch}
      - –¢–∏–ø –û–°: ${systemInfo.osType}
      - –í–µ—Ä—Å–∏—è –û–°: ${systemInfo.osRelease}
      - –ò–º—è —Ö–æ—Å—Ç–∞: ${systemInfo.hostname}
      - –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã: ${systemInfo.uptime}
    - –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ INK
  `;

  const options = {
    reply_markup: {
      inline_keyboard: [
        [{ text: "‚úÖ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", callback_data: 'restart' }],
        [{ text: "üõ† –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤", callback_data: 'developer_info' }],
        [{ text: "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω –í–ö–æ–Ω—Ç–∞–∫—Ç–µ", callback_data: 'check_token' }],
        [{ text: "üîó –ö–æ–¥ –Ω–∞ GitHub", url: "https://github.com/inkoson007/TELEGRAM-BOT-INFO-VK-PROFILE" }],
        [{ text: isLoggingEnabled ? "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏" : "‚úÖ –í–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏", callback_data: 'toggle_logs' }] // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –ª–æ–≥–æ–≤
      ]
    }
  };

  bot.sendMessage(chatId, settingsMessage, options);

  if (isLoggingEnabled) console.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤ —á–∞—Ç ${chatId}`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
  if (isLoggingEnabled) console.log(`–ö–æ–º–∞–Ω–¥–∞ —Å –∫–Ω–æ–ø–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è —á–∞—Ç–∞ ${chatId}: ${data}`);

  if (data === 'restart') {
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot.sendMessage(chatId, '‚öôÔ∏è –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...');
    exec('node index.js', (error, stdout, stderr) => {
      if (error) {
        return bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: ${error.message}`);
      }
      if (stderr) {
        return bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${stderr}`);
      }
      bot.sendMessage(chatId, '‚úÖ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      process.exit();  // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
    });

    if (isLoggingEnabled) console.log(`–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
  }

  if (data === 'developer_info') {
    sendDeveloperInfo(chatId);
  }

  if (data === 'check_token') {
    const vkTokenValid = await checkVkToken() ? "‚úÖ –¢–æ–∫–µ–Ω –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω" : "‚ùå –¢–æ–∫–µ–Ω –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω";
    bot.sendMessage(chatId, `–°—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: ${vkTokenValid}`);
  }

  if (data === 'toggle_logs') {
    isLoggingEnabled = !isLoggingEnabled;  // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    const logStatusMessage = isLoggingEnabled ? "‚úÖ –õ–æ–≥–∏ –≤–∫–ª—é—á–µ–Ω—ã" : "‚ùå –õ–æ–≥–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã";
    bot.sendMessage(chatId, logStatusMessage);
    if (isLoggingEnabled) console.log('–õ–æ–≥–∏ –≤–∫–ª—é—á–µ–Ω—ã');
    else console.log('–õ–æ–≥–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã');
  }

  bot.answerCallbackQuery(callbackQuery.id);
});

//üìå –∫–æ–º–∞–Ω–¥–∞ id
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
async function getVkUserId(profileUrl) {
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å—Å—ã–ª–∫–∏
    const usernameMatch = profileUrl.match(/vk\.com\/([a-zA-Z0-9_.]+)/);
    if (!usernameMatch) return null;

    const username = usernameMatch[1];

    // –ó–∞–ø—Ä–æ—Å –∫ API VK –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID
    const response = await axios.get('https://api.vk.com/method/users.get', {
      params: {
        user_ids: username,
        access_token: process.env.VK_ACCESS_TOKEN, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        v: '5.131',
      },
    });

    if (response.data.response && response.data.response.length > 0) {
      return response.data.response[0].id; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    } else {
      return null;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return null;
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /id
bot.onText(/\/id (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const profileUrl = match[1].trim();

  bot.sendMessage(chatId, '‚è≥ –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ—Ñ–∏–ª—è...');

  const userId = await getVkUserId(profileUrl);

  if (userId) {
    bot.sendMessage(chatId, `‚úÖ ID –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: ${userId}`);
  } else {
    bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏.');
  }
});

//üìå –∫–æ–º–∞–Ω–¥–∞ gid
bot.onText(/\/gid (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  let groupUrl = match[1].trim(); // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã

  // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã
  const vkUrlPattern = /(?:https?:\/\/)?(?:www\.)?vk\.com\/([a-zA-Z0-9_.-]+)/;
  const matchResult = groupUrl.match(vkUrlPattern);

  if (!matchResult) {
    return bot.sendMessage(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.");
  }

  let screenName = matchResult[1]; // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –≥—Ä—É–ø–ø—ã

  try {
    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å: –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ resolveScreenName
    const resolveResponse = await axios.get("https://api.vk.com/method/utils.resolveScreenName", {
      params: {
        screen_name: screenName,
        access_token: process.env.VK_ACCESS_TOKEN, // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ç–æ–∫–µ–Ω
        v: "5.199",
      },
    });

    if (resolveResponse.data.error) {
      return bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ VK API: ${resolveResponse.data.error.error_msg}`);
    }

    const resolved = resolveResponse.data.response;
    if (!resolved || resolved.type !== "group") {
      return bot.sendMessage(chatId, "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å—Å—ã–ª–∫–∏.");
    }

    const groupId = resolved.object_id;

    bot.sendMessage(chatId, `‚úÖ ID –≥—Ä—É–ø–ø—ã: ${groupId}`);
  } catch (error) {
    console.error(error);
    bot.sendMessage(chatId, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.");
  }
});

//üìå –∫–æ–º–∞–Ω–¥–∞ statistic
// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
db.run(`CREATE TABLE IF NOT EXISTS friends (
  user_id INTEGER,
  friend_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  added_at TEXT,
  removed_at TEXT,
  PRIMARY KEY (user_id, friend_id)
)`);

async function trackFriends(userId) {
  try {
    const userInfo = await vk.api.users.get({ user_ids: userId });
    const userFullName = `${userInfo[0].first_name} ${userInfo[0].last_name}`;

    const { items: friends } = await vk.api.friends.get({ user_id: userId, fields: 'nickname' });
    const currentFriends = new Map(friends.map(f => [f.id, f]));

    db.all('SELECT friend_id FROM friends WHERE user_id = ? AND removed_at IS NULL', [userId], (err, rows) => {
      if (err) return console.error(err);
      const knownFriends = new Map(rows.map(row => [row.friend_id, true]));

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π
      friends.forEach(friend => {
        if (!knownFriends.has(friend.id)) {
          db.run('INSERT INTO friends (user_id, friend_id, first_name, last_name, added_at) VALUES (?, ?, ?, ?, ?)',
            [userId, friend.id, friend.first_name, friend.last_name, moment().format('YYYY-MM-DD HH:mm:ss')]);
        }
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π
      knownFriends.forEach((_, id) => {
        if (!currentFriends.has(id)) {
          db.run('UPDATE friends SET removed_at = ? WHERE user_id = ? AND friend_id = ?',
            [moment().format('YYYY-MM-DD HH:mm:ss'), userId, id]);
        }
      });
    });

    return userFullName;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥—Ä—É–∑–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    return null;
  }
}

bot.onText(/\/statistic (\d+)/, async (msg, match) => {
  const userId = match[1];
  const userFullName = await trackFriends(userId);

  if (!userFullName) {
    return bot.sendMessage(msg.chat.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.');
  }

  db.get('SELECT COUNT(*) AS count FROM friends WHERE user_id = ?', [userId], async (err, row) => {
    if (err) return bot.sendMessage(msg.chat.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö.');

    if (row.count === 0) {
      bot.sendMessage(msg.chat.id, `üëÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userFullName} –≤–ø–µ—Ä–≤—ã–µ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ. –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...`);
    }

    // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É, —á—Ç–æ–±—ã –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–∏–ª–∞—Å—å
    await new Promise(resolve => setTimeout(resolve, 1000));

    db.all('SELECT * FROM friends WHERE user_id = ?', [userId], async (err, rows) => {
      if (err) return bot.sendMessage(msg.chat.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');

      if (rows.length === 0) {
        return bot.sendMessage(msg.chat.id, `–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userFullName}.`);
      }

      // –ó–∞–≥–æ–ª–æ–≤–æ–∫
      const title = `=====================\n Developer by INK \n=====================\n\n`;

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      let message = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—Ä—É–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userFullName}:\n\n`;
      let fileContent = title + `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—Ä—É–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userFullName}:\n\n`;

      rows.forEach(row => {
        const friendData = `üë§ ${row.first_name} ${row.last_name}\n–î–æ–±–∞–≤–ª–µ–Ω: ${row.added_at}\n` +
                           (row.removed_at ? `–£–¥–∞–ª–µ–Ω: ${row.removed_at} ‚ùå\n\n` : `–í –¥—Ä—É–∑—å—è—Ö: ‚úÖ\n\n`);

        message += friendData;
        fileContent += friendData;
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
      if (message.length > 4096) {
        // –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ‚Äî —Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
        const fileName = `friends_stat_${userId}.txt`;
        const filePath = `./${fileName}`;
        fs.writeFileSync(filePath, fileContent);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        const options = {
          reply_markup: JSON.stringify({
            inline_keyboard: [
              [{ text: 'üìÇ –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª', callback_data: `send_file_${userId}` }]
            ]
          })
        };

        return bot.sendMessage(msg.chat.id, '‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª.', options);
      }

      // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–ª–∏–Ω–Ω–æ–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
      bot.sendMessage(msg.chat.id, message);
    });
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª"
bot.on('callback_query', (query) => {
  if (query.data.startsWith('send_file_')) {
    const userId = query.data.split('_')[2];
    const filePath = `./friends_stat_${userId}.txt`;

    bot.sendDocument(query.message.chat.id, filePath, { caption: 'üìÇ –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—Ä—É–∑–µ–π' })
      .then(() => fs.unlinkSync(filePath)) // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
      .catch(err => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:', err));
  }
});

//üìå –∫–æ–º–∞–Ω–¥–∞ like
// –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±–∏–µ–Ω–∏—è –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
function splitMessage(text, maxLength = 4000) {
  let parts = [];
  while (text.length > maxLength) {
      let sliceIndex = text.lastIndexOf('\n', maxLength);
      if (sliceIndex === -1) sliceIndex = maxLength;
      parts.push(text.slice(0, sliceIndex));
      text = text.slice(sliceIndex);
  }
  parts.push(text);
  return parts;
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserName(userId) {
  try {
      const user = await vk.api.users.get({ user_ids: userId });
      return `${user[0].first_name} ${user[0].last_name}`;
  } catch (error) {
      console.error(error);
      return `ID: ${userId}`;
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∞–π–∫–æ–≤ —Å –ø–æ—Å—Ç–æ–≤ –∏ —Ñ–æ—Ç–æ
async function getLikes(userId) {
  let likesData = new Map();

  try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const wall = await vk.api.wall.get({ owner_id: userId, count: 10 });

      for (const post of wall.items) {
          const likes = await vk.api.likes.getList({
              type: 'post',
              owner_id: userId,
              item_id: post.id,
              extended: 1 // –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞
          });

          for (const user of likes.items) {
              const userKey = `üë§ ${user.first_name} ${user.last_name}`;
              likesData.set(userKey, (likesData.get(userKey) || 0) + 1);
          }
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
      const profilePhotos = await vk.api.photos.get({
          owner_id: userId,
          album_id: 'profile',
          count: 5
      });

      for (const photo of profilePhotos.items) {
          const likes = await vk.api.likes.getList({
              type: 'photo',
              owner_id: userId,
              item_id: photo.id,
              extended: 1
          });

          for (const user of likes.items) {
              const userKey = `üì∏ ${user.first_name} ${user.last_name}`;
              likesData.set(userKey, (likesData.get(userKey) || 0) + 1);
          }
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
      const allPhotos = await vk.api.photos.getAll({
          owner_id: userId,
          count: 10
      });

      for (const photo of allPhotos.items) {
          const likes = await vk.api.likes.getList({
              type: 'photo',
              owner_id: userId,
              item_id: photo.id,
              extended: 1
          });

          for (const user of likes.items) {
              const userKey = `üñºÔ∏è ${user.first_name} ${user.last_name}`;
              likesData.set(userKey, (likesData.get(userKey) || 0) + 1);
          }
      }

      if (likesData.size === 0) {
          return ['‚ùå –õ–∞–π–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'];
      }

      return Array.from(likesData.entries()).map(([name, count]) => `‚ù§Ô∏è ${name}: ${count} –ª–∞–π–∫–æ–≤`).join('\n');
  } catch (error) {
      console.error(error);
      return '‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∞–π–∫–æ–≤';
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /like
bot.onText(/\/like (\d+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const userId = match[1];

  bot.sendMessage(chatId, '‚è≥ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...');

  const userName = await getUserName(userId);
  const likesText = await getLikes(userId);

  const header = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–∞–π–∫–∞–º –¥–ª—è ${userName}*`;
  const messages = splitMessage(`${header}\n\n${likesText}`);

  for (const message of messages) {
      bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
  }
});

//üìå –∫–æ–º–∞–Ω–¥–∞ post
bot.onText(/\/post (\d+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const userId = match[1];

  try {
      const response = await vk.api.wall.get({ owner_id: userId, count: 5 });
      if (!response.items.length) {
          return bot.sendMessage(chatId, "‚ùå –ü–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
      }

      for (const post of response.items) {
          let text = post.text || "(–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞)";
          let attachments = [];
          let isRepost = false;
          let repostText = "";
          
          if (post.copy_history) {
              isRepost = true;
              const repost = post.copy_history[0];
              repostText = `\nüîÅ –†–µ–ø–æ—Å—Ç –æ—Ç [vk.com/id${repost.owner_id}](https://vk.com/id${repost.owner_id})\n`;
              text += repostText + (repost.text || "(–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞)");
              
              if (repost.attachments) {
                  for (const att of repost.attachments) {
                      if (att.type === "photo") {
                          const photo = att.photo.sizes.pop().url;
                          attachments.push(photo);
                      }
                  }
              }
          }
          
          if (post.attachments) {
              for (const att of post.attachments) {
                  if (att.type === "photo") {
                      const photo = att.photo.sizes.pop().url;
                      attachments.push(photo);
                  }
              }
          }

          let caption = `üìù ${isRepost ? "–†–µ–ø–æ—Å—Ç" : "–ü–æ—Å—Ç"} –æ—Ç [vk.com/id${userId}](https://vk.com/id${userId})\n${text}`;
          if (attachments.length) {
              await bot.sendPhoto(chatId, attachments[0], { caption, parse_mode: "Markdown" });
          } else {
              await bot.sendMessage(chatId, caption, { parse_mode: "Markdown" });
          }
      }
  } catch (error) {
      console.error(error);
      bot.sendMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤.");
  }
});

//üìå –∫–æ–º–∞–Ω–¥–∞ –æ–±—â–µ–Ω–∏–µ
bot.onText(/\/–æ–±—â–µ–Ω–∏–µ (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = match[1].trim();

    if (!userId || isNaN(userId)) {
        return bot.sendMessage(chatId, '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.');
    }

    try {
        const [targetUser] = await vk.api.users.get({ 
            user_ids: userId, 
            fields: ['last_seen'] 
        });

        if (!targetUser?.last_seen) {
            return bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ–Ω —Å–∫—Ä—ã–ª –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è.');
        }

        const targetLastSeen = targetUser.last_seen.time;
        const targetExitTime = new Date(targetLastSeen * 1000);

        // –ü–æ–ª—É—á–∞–µ–º –¥—Ä—É–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { items: friends } = await vk.api.friends.get({ 
            user_id: userId, 
            fields: ['last_seen', 'first_name', 'last_name'] 
        });

        if (!friends || friends.length === 0) {
            return bot.sendMessage(chatId, '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥—Ä—É–∑–µ–π –∏–ª–∏ –æ–Ω–∏ —Å–∫—Ä—ã—Ç—ã.');
        }

        // –§–∏–ª—å—Ç—Ä—É–µ–º –¥—Ä—É–∑–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ–Ω–ª–∞–π–Ω ¬±5 –º–∏–Ω—É—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–∞
        const possibleFriends = friends.filter(friend => {
            if (!friend.last_seen) return false;

            const friendLastSeen = friend.last_seen.time;
            const diffMinutes = Math.abs((targetLastSeen - friendLastSeen) / 60);

            return diffMinutes <= 5;
        });

        if (possibleFriends.length === 0) {
            return bot.sendMessage(chatId, '–ù–µ—Ç –¥—Ä—É–∑–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ–Ω–ª–∞–π–Ω –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 5 –º–∏–Ω—É—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        let message = `üë• –í–æ–∑–º–æ–∂–Ω—ã–µ –¥—Ä—É–∑—å—è, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –æ–±—â–∞–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [id${userId}|${targetUser.first_name} ${targetUser.last_name}]:\n\n`;
        message += `üïí –í—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞: ${targetExitTime.toLocaleString('ru-RU')}\n\n`;

        possibleFriends.forEach(friend => {
            const friendLastSeen = friend.last_seen.time;
            const diffMinutes = Math.abs((targetLastSeen - friendLastSeen) / 60);
            let emoji;

            if (diffMinutes >= 0 && diffMinutes <= 1) emoji = 'üü¢'; // 0-1 –º–∏–Ω
            else if (diffMinutes <= 3) emoji = 'üü°'; // 2-3 –º–∏–Ω
            else emoji = 'üî¥'; // 4-5 –º–∏–Ω

            const friendExitTime = new Date(friendLastSeen * 1000);
            message += `${emoji} [id${friend.id}|${friend.first_name} ${friend.last_name}] ‚Äî ${friendExitTime.toLocaleString('ru-RU')}\n`;
        });

        bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    } catch (error) {
        console.error(error);
        bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.');
    }
});

//üìå –∫–æ–º–∞–Ω–¥–∞ update
bot.onText(/\/update/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const version = "2.1";
    const updateTitle = "VK –®–ø–∏–æ–Ω v" + version;
    const updateFeatures = [
      "‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ /–æ–±—â–µ–Ω–∏–µ"
    ];

    // –°–æ–∑–¥–∞–µ–º —Ö–æ–ª—Å—Ç —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
    const canvasWidth = 800;
    const canvasHeight = 600;
    const canvas = createCanvas(canvasWidth, canvasHeight);
    const ctx = canvas.getContext("2d");

    // –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
    const gradient = ctx.createLinearGradient(0, 0, canvasWidth, canvasHeight);
    gradient.addColorStop(0, "#1e3c72");
    gradient.addColorStop(1, "#2a5298");
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, canvasWidth, canvasHeight);

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ç–µ–Ω—å—é
    ctx.shadowColor = "rgba(0, 0, 0, 0.5)";
    ctx.shadowBlur = 10;
    ctx.shadowOffsetY = 5;
    ctx.fillStyle = "#ffffff";
    ctx.font = "bold 42px Arial";
    ctx.textAlign = "center";
    ctx.fillText(updateTitle, canvasWidth / 2, 100);
    ctx.shadowColor = "transparent"; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–Ω—å

    // –ë–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    const blockWidth = 700;
    const blockHeight = 350;
    const blockX = (canvasWidth - blockWidth) / 2;
    const blockY = 150;
    
    // –°–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –¥–ª—è –±–ª–æ–∫–∞
    ctx.fillStyle = "rgba(255, 255, 255, 0.1)";
    ctx.strokeStyle = "rgba(255, 255, 255, 0.3)";
    ctx.lineWidth = 2;
    roundedRect(ctx, blockX, blockY, blockWidth, blockHeight, 20);
    ctx.fill();
    ctx.stroke();

    // –ò–∫–æ–Ω–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    ctx.font = "72px Arial";
    ctx.fillStyle = "#4fc3f7";
    ctx.fillText("üÜï", canvasWidth / 2 - 300, 180);

    // –¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    ctx.fillStyle = "#ffffff";
    ctx.font = "bold 28px Arial";
    ctx.fillText("–ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏:", canvasWidth / 2, 200);

    // –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    ctx.font = "24px Arial";
    let yPos = 250;
    const lineHeight = 40;
    
    updateFeatures.forEach(feature => {
      ctx.fillText(feature, canvasWidth / 2, yPos);
      yPos += lineHeight;
    });

    // –ü–æ–¥–ø–∏—Å—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    ctx.fillStyle = "rgba(255, 255, 255, 0.7)";
    ctx.font = "italic 20px Arial";
    ctx.fillText("Developer by INK", canvasWidth / 2, canvasHeight - 50);

    // –í–µ—Ä—Å–∏—è –≤ —É–≥–ª—É
    ctx.fillStyle = "rgba(255, 255, 255, 0.5)";
    ctx.font = "16px Arial";
    ctx.textAlign = "right";
    ctx.fillText("v" + version, canvasWidth - 30, canvasHeight - 30);

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    const tempFile = path.join(os.tmpdir(), `update_${version}.png`);
    const out = fs.createWriteStream(tempFile);
    const stream = canvas.createPNGStream();

    await new Promise((resolve, reject) => {
      stream.pipe(out);
      out.on('finish', resolve);
      out.on('error', reject);
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await bot.sendPhoto(chatId, tempFile, {
      caption: `üÜï –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${updateTitle}\n` 
    });

    // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    fs.unlink(tempFile, () => {});

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", error);
    await bot.sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏");
  }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
function roundedRect(ctx, x, y, width, height, radius) {
  ctx.beginPath();
  ctx.moveTo(x + radius, y);
  ctx.lineTo(x + width - radius, y);
  ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
  ctx.lineTo(x + width, y + height - radius);
  ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
  ctx.lineTo(x + radius, y + height);
  ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
  ctx.lineTo(x, y + radius);
  ctx.quadraticCurveTo(x, y, x + radius, y);
  ctx.closePath();
}

// –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–∞–∂–¥—É—é 1 –º–∏–Ω—É—Ç—É
setInterval(periodicTracking, 60 * 1000); // 60 —Å–µ–∫—É–Ω–¥